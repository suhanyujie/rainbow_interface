// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: rainbow.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameType int32

const (
	// pve
	GameType_Pve GameType = 0
	// pvp 1v1
	GameType_Pvp1v1 GameType = 1
	// 多人同屏
	GameType_Pvp1vn GameType = 2
)

// Enum value maps for GameType.
var (
	GameType_name = map[int32]string{
		0: "Pve",
		1: "Pvp1v1",
		2: "Pvp1vn",
	}
	GameType_value = map[string]int32{
		"Pve":    0,
		"Pvp1v1": 1,
		"Pvp1vn": 2,
	}
)

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}

func (x GameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[0].Descriptor()
}

func (GameType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[0]
}

func (x GameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameType.Descriptor instead.
func (GameType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{0}
}

type SkillState int32

const (
	SkillState_SkillStateEmpty0 SkillState = 0
	// 冷却、充能中
	SkillState_Cooling SkillState = 1
	// 就绪
	SkillState_Ready SkillState = 2
)

// Enum value maps for SkillState.
var (
	SkillState_name = map[int32]string{
		0: "SkillStateEmpty0",
		1: "Cooling",
		2: "Ready",
	}
	SkillState_value = map[string]int32{
		"SkillStateEmpty0": 0,
		"Cooling":          1,
		"Ready":            2,
	}
)

func (x SkillState) Enum() *SkillState {
	p := new(SkillState)
	*p = x
	return p
}

func (x SkillState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkillState) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[1].Descriptor()
}

func (SkillState) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[1]
}

func (x SkillState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkillState.Descriptor instead.
func (SkillState) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{1}
}

type GameOverType int32

const (
	GameOverType_GOT_Empty GameOverType = 0
	// 角色掉落
	GameOverType_RoleDie GameOverType = 1
	// 角色都掉落
	GameOverType_RoleAllDie GameOverType = 2
	// 枢纽战斗死亡
	GameOverType_FightDie GameOverType = 3
)

// Enum value maps for GameOverType.
var (
	GameOverType_name = map[int32]string{
		0: "GOT_Empty",
		1: "RoleDie",
		2: "RoleAllDie",
		3: "FightDie",
	}
	GameOverType_value = map[string]int32{
		"GOT_Empty":  0,
		"RoleDie":    1,
		"RoleAllDie": 2,
		"FightDie":   3,
	}
)

func (x GameOverType) Enum() *GameOverType {
	p := new(GameOverType)
	*p = x
	return p
}

func (x GameOverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameOverType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[2].Descriptor()
}

func (GameOverType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[2]
}

func (x GameOverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameOverType.Descriptor instead.
func (GameOverType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{2}
}

type OperateType int32

const (
	OperateType_OptEmpty OperateType = 0
	// 左滑
	OperateType_Left OperateType = 1
	// 右滑
	OperateType_Right OperateType = 2
	// 连接
	OperateType_Concat OperateType = 3
	// 弹起
	OperateType_Bounce OperateType = 4
)

// Enum value maps for OperateType.
var (
	OperateType_name = map[int32]string{
		0: "OptEmpty",
		1: "Left",
		2: "Right",
		3: "Concat",
		4: "Bounce",
	}
	OperateType_value = map[string]int32{
		"OptEmpty": 0,
		"Left":     1,
		"Right":    2,
		"Concat":   3,
		"Bounce":   4,
	}
)

func (x OperateType) Enum() *OperateType {
	p := new(OperateType)
	*p = x
	return p
}

func (x OperateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperateType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[3].Descriptor()
}

func (OperateType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[3]
}

func (x OperateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperateType.Descriptor instead.
func (OperateType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{3}
}

type AwardType int32

const (
	AwardType_AwardTypeEmpty AwardType = 0
	// 生命值
	AwardType_Hp AwardType = 1
	// 攻击力
	AwardType_Atk AwardType = 2
	// 原初之力
	AwardType_Power AwardType = 3
)

// Enum value maps for AwardType.
var (
	AwardType_name = map[int32]string{
		0: "AwardTypeEmpty",
		1: "Hp",
		2: "Atk",
		3: "Power",
	}
	AwardType_value = map[string]int32{
		"AwardTypeEmpty": 0,
		"Hp":             1,
		"Atk":            2,
		"Power":          3,
	}
)

func (x AwardType) Enum() *AwardType {
	p := new(AwardType)
	*p = x
	return p
}

func (x AwardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwardType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[4].Descriptor()
}

func (AwardType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[4]
}

func (x AwardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwardType.Descriptor instead.
func (AwardType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{4}
}

type EffectType int32

const (
	EffectType_Effect0Normal       EffectType = 0  // 普攻
	EffectType_Effect1Displacement EffectType = 1  // 位移
	EffectType_Effect2Rigidity     EffectType = 2  // 僵直
	EffectType_Effect3Fog          EffectType = 3  // 迷雾
	EffectType_Effect4ResistHurt   EffectType = 4  // 抵消伤害
	EffectType_Effect5Attract      EffectType = 5  // 吸收
	EffectType_Effect6Shadow       EffectType = 6  // 分身
	EffectType_Effect7DeBuffHp     EffectType = 7  // 降低生命
	EffectType_Effect8DeBuffAtk    EffectType = 8  // 降低攻击
	EffectType_Effect9Sprint       EffectType = 9  // 冲刺
	EffectType_Effect10BuffAtk     EffectType = 10 // 提高攻击力
	EffectType_Effect11Float       EffectType = 11 // 漂浮
)

// Enum value maps for EffectType.
var (
	EffectType_name = map[int32]string{
		0:  "Effect0Normal",
		1:  "Effect1Displacement",
		2:  "Effect2Rigidity",
		3:  "Effect3Fog",
		4:  "Effect4ResistHurt",
		5:  "Effect5Attract",
		6:  "Effect6Shadow",
		7:  "Effect7DeBuffHp",
		8:  "Effect8DeBuffAtk",
		9:  "Effect9Sprint",
		10: "Effect10BuffAtk",
		11: "Effect11Float",
	}
	EffectType_value = map[string]int32{
		"Effect0Normal":       0,
		"Effect1Displacement": 1,
		"Effect2Rigidity":     2,
		"Effect3Fog":          3,
		"Effect4ResistHurt":   4,
		"Effect5Attract":      5,
		"Effect6Shadow":       6,
		"Effect7DeBuffHp":     7,
		"Effect8DeBuffAtk":    8,
		"Effect9Sprint":       9,
		"Effect10BuffAtk":     10,
		"Effect11Float":       11,
	}
)

func (x EffectType) Enum() *EffectType {
	p := new(EffectType)
	*p = x
	return p
}

func (x EffectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EffectType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[5].Descriptor()
}

func (EffectType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[5]
}

func (x EffectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EffectType.Descriptor instead.
func (EffectType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{5}
}

type EffTiming int32

const (
	EffTiming_EffTimingEmpty EffTiming = 0
	EffTiming_AtkBefore      EffTiming = 1 // 攻击前
	EffTiming_AtkWhen        EffTiming = 2 // 攻击时
	EffTiming_AtkAfter       EffTiming = 3 // 攻击后
	EffTiming_BeAtkBefore    EffTiming = 4 // 被攻击前
	EffTiming_BeAtkWhen      EffTiming = 5 // 被攻击时
	EffTiming_BeAtkAfter     EffTiming = 6 // 被攻击后
)

// Enum value maps for EffTiming.
var (
	EffTiming_name = map[int32]string{
		0: "EffTimingEmpty",
		1: "AtkBefore",
		2: "AtkWhen",
		3: "AtkAfter",
		4: "BeAtkBefore",
		5: "BeAtkWhen",
		6: "BeAtkAfter",
	}
	EffTiming_value = map[string]int32{
		"EffTimingEmpty": 0,
		"AtkBefore":      1,
		"AtkWhen":        2,
		"AtkAfter":       3,
		"BeAtkBefore":    4,
		"BeAtkWhen":      5,
		"BeAtkAfter":     6,
	}
)

func (x EffTiming) Enum() *EffTiming {
	p := new(EffTiming)
	*p = x
	return p
}

func (x EffTiming) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EffTiming) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[6].Descriptor()
}

func (EffTiming) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[6]
}

func (x EffTiming) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EffTiming.Descriptor instead.
func (EffTiming) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{6}
}

// buff 生效类型
type BuffEffMode int32

const (
	BuffEffMode_BuffEffModeEmpty BuffEffMode = 0
	// 按次数生效
	BuffEffMode_Times BuffEffMode = 1
	// 按时间生效
	BuffEffMode_TimeSec BuffEffMode = 2
	// 其他
	BuffEffMode_Other BuffEffMode = 100
)

// Enum value maps for BuffEffMode.
var (
	BuffEffMode_name = map[int32]string{
		0:   "BuffEffModeEmpty",
		1:   "Times",
		2:   "TimeSec",
		100: "Other",
	}
	BuffEffMode_value = map[string]int32{
		"BuffEffModeEmpty": 0,
		"Times":            1,
		"TimeSec":          2,
		"Other":            100,
	}
)

func (x BuffEffMode) Enum() *BuffEffMode {
	p := new(BuffEffMode)
	*p = x
	return p
}

func (x BuffEffMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuffEffMode) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[7].Descriptor()
}

func (BuffEffMode) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[7]
}

func (x BuffEffMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuffEffMode.Descriptor instead.
func (BuffEffMode) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{7}
}

type BuffRoleAttr int32

const (
	BuffRoleAttr_BuffRoleAttrEmpty BuffRoleAttr = 0
	// 角色属性-生命值
	BuffRoleAttr_RoleAttrHp BuffRoleAttr = 1
	// 角色属性-攻击力
	BuffRoleAttr_RoleAttrAtk BuffRoleAttr = 2
)

// Enum value maps for BuffRoleAttr.
var (
	BuffRoleAttr_name = map[int32]string{
		0: "BuffRoleAttrEmpty",
		1: "RoleAttrHp",
		2: "RoleAttrAtk",
	}
	BuffRoleAttr_value = map[string]int32{
		"BuffRoleAttrEmpty": 0,
		"RoleAttrHp":        1,
		"RoleAttrAtk":       2,
	}
)

func (x BuffRoleAttr) Enum() *BuffRoleAttr {
	p := new(BuffRoleAttr)
	*p = x
	return p
}

func (x BuffRoleAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuffRoleAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[8].Descriptor()
}

func (BuffRoleAttr) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[8]
}

func (x BuffRoleAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuffRoleAttr.Descriptor instead.
func (BuffRoleAttr) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{8}
}

type ControlEff int32

const (
	ControlEff_ControlEffEmpty ControlEff = 0
	// 僵直
	ControlEff_CEff_Rigidity ControlEff = 1
	// 眩晕
	ControlEff_CEff_Stun ControlEff = 2
	// 沉默
	ControlEff_CEff_Silence ControlEff = 3
	// 无敌
	ControlEff_CEff_Invincible ControlEff = 4
	// 隐身
	ControlEff_CEff_Invisible ControlEff = 5
	// 冲刺
	ControlEff_CEff_Sprint ControlEff = 6
	// 漂浮
	ControlEff_CEff_Float ControlEff = 7
)

// Enum value maps for ControlEff.
var (
	ControlEff_name = map[int32]string{
		0: "ControlEffEmpty",
		1: "CEff_Rigidity",
		2: "CEff_Stun",
		3: "CEff_Silence",
		4: "CEff_Invincible",
		5: "CEff_Invisible",
		6: "CEff_Sprint",
		7: "CEff_Float",
	}
	ControlEff_value = map[string]int32{
		"ControlEffEmpty": 0,
		"CEff_Rigidity":   1,
		"CEff_Stun":       2,
		"CEff_Silence":    3,
		"CEff_Invincible": 4,
		"CEff_Invisible":  5,
		"CEff_Sprint":     6,
		"CEff_Float":      7,
	}
)

func (x ControlEff) Enum() *ControlEff {
	p := new(ControlEff)
	*p = x
	return p
}

func (x ControlEff) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlEff) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[9].Descriptor()
}

func (ControlEff) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[9]
}

func (x ControlEff) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlEff.Descriptor instead.
func (ControlEff) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{9}
}

// 客户端请求服务端结构
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息 id | @inject_tag: msgpack:"message_id" json:"message_id"
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id" msgpack:"message_id"`
	// 用户 id | @inject_tag: msgpack:"uid" json:"uid"
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 协议携带的数据 | @inject_tag: msgpack:"data" json:"data"
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data" msgpack:"data"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Message) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Message) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ErrInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 备注信息 | @inject_tag: msgpack:"msg" json:"msg"
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg" msgpack:"msg"`
}

func (x *ErrInfo) Reset() {
	*x = ErrInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrInfo) ProtoMessage() {}

func (x *ErrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrInfo.ProtoReflect.Descriptor instead.
func (*ErrInfo) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{1}
}

func (x *ErrInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type NormalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 备注信息 | @inject_tag: msgpack:"msg" json:"msg"
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg" msgpack:"msg"`
}

func (x *NormalInfo) Reset() {
	*x = NormalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalInfo) ProtoMessage() {}

func (x *NormalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalInfo.ProtoReflect.Descriptor instead.
func (*NormalInfo) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{2}
}

func (x *NormalInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 客户端建立连接后，请求一次登录，参数是用户的 token
type UserLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户的 token，一般从平台获取 | @inject_tag: msgpack:"token" json:"token"
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token" msgpack:"token"`
}

func (x *UserLogin) Reset() {
	*x = UserLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogin) ProtoMessage() {}

func (x *UserLogin) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogin.ProtoReflect.Descriptor instead.
func (*UserLogin) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{3}
}

func (x *UserLogin) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type JoinGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 平台提供的房间 id，结算时透传。因为是长整，恐前端会溢出，所以用字符串类型。ext 前缀表示 external | @inject_tag: msgpack:"extRoomId" json:"extRoomId"
	ExtRoomId *string `protobuf:"bytes,1,opt,name=extRoomId,proto3,oneof" json:"extRoomId" msgpack:"extRoomId"`
	// 平台的对局 id，全局唯一 [必填] | @inject_tag: msgpack:"extMatchId" json:"extMatchId"
	ExtMatchId string `protobuf:"bytes,2,opt,name=extMatchId,proto3" json:"extMatchId" msgpack:"extMatchId"`
	// 是否与机器人对战 | @inject_tag: msgpack:"needBot" json:"needBot"
	NeedBot *bool `protobuf:"varint,3,opt,name=needBot,proto3,oneof" json:"needBot" msgpack:"needBot"`
	// 机器人的 uid | @inject_tag: msgpack:"botId" json:"botId"
	BotId *int32 `protobuf:"varint,4,opt,name=botId,proto3,oneof" json:"botId" msgpack:"botId"`
	// 机器人的 nft | @inject_tag: msgpack:"botNft" json:"botNft"
	BotNft *int32 `protobuf:"varint,5,opt,name=botNft,proto3,oneof" json:"botNft" msgpack:"botNft"`
	// 门票 | @inject_tag: msgpack:"ticket" json:"ticket"
	Ticket *float32 `protobuf:"fixed32,6,opt,name=ticket,proto3,oneof" json:"ticket" msgpack:"ticket"`
	// 对战类型，平台参数，区分 1v1，淘汰赛等 | @inject_tag: msgpack:"pvpType" json:"pvpType"
	PvpType *int32 `protobuf:"varint,7,opt,name=pvpType,proto3,oneof" json:"pvpType" msgpack:"pvpType"`
	// 游戏类型 [必填] | @inject_tag: msgpack:"roomType" json:"roomType"
	RoomType GameType `protobuf:"varint,8,opt,name=roomType,proto3,enum=rainbow.v1.GameType" json:"roomType" msgpack:"roomType"`
	// 机器人的 ai 策略类型 | @inject_tag: msgpack:"aiPolicyType" json:"aiPolicyType"
	AiPolicyType *int32 `protobuf:"varint,9,opt,name=aiPolicyType,proto3,oneof" json:"aiPolicyType" msgpack:"aiPolicyType"`
	// 关卡/难度 [必填] | @inject_tag: msgpack:"levelId" json:"levelId"
	LevelId int32 `protobuf:"varint,10,opt,name=levelId,proto3" json:"levelId" msgpack:"levelId"`
	// 对局的总人数 | @inject_tag: msgpack:"num" json:"num"
	Num int32 `protobuf:"varint,11,opt,name=num,proto3" json:"num" msgpack:"num"`
}

func (x *JoinGameReq) Reset() {
	*x = JoinGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGameReq) ProtoMessage() {}

func (x *JoinGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGameReq.ProtoReflect.Descriptor instead.
func (*JoinGameReq) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{4}
}

func (x *JoinGameReq) GetExtRoomId() string {
	if x != nil && x.ExtRoomId != nil {
		return *x.ExtRoomId
	}
	return ""
}

func (x *JoinGameReq) GetExtMatchId() string {
	if x != nil {
		return x.ExtMatchId
	}
	return ""
}

func (x *JoinGameReq) GetNeedBot() bool {
	if x != nil && x.NeedBot != nil {
		return *x.NeedBot
	}
	return false
}

func (x *JoinGameReq) GetBotId() int32 {
	if x != nil && x.BotId != nil {
		return *x.BotId
	}
	return 0
}

func (x *JoinGameReq) GetBotNft() int32 {
	if x != nil && x.BotNft != nil {
		return *x.BotNft
	}
	return 0
}

func (x *JoinGameReq) GetTicket() float32 {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return 0
}

func (x *JoinGameReq) GetPvpType() int32 {
	if x != nil && x.PvpType != nil {
		return *x.PvpType
	}
	return 0
}

func (x *JoinGameReq) GetRoomType() GameType {
	if x != nil {
		return x.RoomType
	}
	return GameType_Pve
}

func (x *JoinGameReq) GetAiPolicyType() int32 {
	if x != nil && x.AiPolicyType != nil {
		return *x.AiPolicyType
	}
	return 0
}

func (x *JoinGameReq) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *JoinGameReq) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

// 玩家加入房间
type ScPlayerJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家用户 id | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 游戏的关卡 id | @inject_tag: msgpack:"levelId" json:"levelId"
	LevelId int32 `protobuf:"varint,2,opt,name=levelId,proto3" json:"levelId" msgpack:"levelId"`
	// 房间内信息 | @inject_tag: msgpack:"room" json:"room"
	Room *RoomDetail `protobuf:"bytes,3,opt,name=room,proto3" json:"room" msgpack:"room"`
	// 是否需要镜像,没用到可以先忽略 | @inject_tag: msgpack:"needMirror" json:"needMirror"
	NeedMirror int32 `protobuf:"varint,4,opt,name=needMirror,proto3" json:"needMirror" msgpack:"needMirror"`
	// 是否是新的对局 | @inject_tag: msgpack:"isNewMatch" json:"isNewMatch"
	IsNewMatch bool `protobuf:"varint,5,opt,name=isNewMatch,proto3" json:"isNewMatch" msgpack:"isNewMatch"`
	// 游戏已经开始多久了。秒 | @inject_tag: msgpack:"gameHasKeptSec" json:"gameHasKeptSec"
	GameHasKeptSec int32 `protobuf:"varint,6,opt,name=gameHasKeptSec,proto3" json:"gameHasKeptSec" msgpack:"gameHasKeptSec"`
}

func (x *ScPlayerJoin) Reset() {
	*x = ScPlayerJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScPlayerJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScPlayerJoin) ProtoMessage() {}

func (x *ScPlayerJoin) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScPlayerJoin.ProtoReflect.Descriptor instead.
func (*ScPlayerJoin) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{5}
}

func (x *ScPlayerJoin) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ScPlayerJoin) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *ScPlayerJoin) GetRoom() *RoomDetail {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *ScPlayerJoin) GetNeedMirror() int32 {
	if x != nil {
		return x.NeedMirror
	}
	return 0
}

func (x *ScPlayerJoin) GetIsNewMatch() bool {
	if x != nil {
		return x.IsNewMatch
	}
	return false
}

func (x *ScPlayerJoin) GetGameHasKeptSec() int32 {
	if x != nil {
		return x.GameHasKeptSec
	}
	return 0
}

type RoomDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// room id | @inject_tag: msgpack:"id" json:"id"
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" msgpack:"id"`
	// 当前，房间内所有玩家信息 | @inject_tag: msgpack:"players" json:"players"
	Players []*Player `protobuf:"bytes,2,rep,name=players,proto3" json:"players" msgpack:"players"`
	// 房间内需要多少人才能开始游戏 | @inject_tag: msgpack:"maxUserNum" json:"maxUserNum"
	MaxUserNum int32 `protobuf:"varint,3,opt,name=maxUserNum,proto3" json:"maxUserNum" msgpack:"maxUserNum"`
}

func (x *RoomDetail) Reset() {
	*x = RoomDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomDetail) ProtoMessage() {}

func (x *RoomDetail) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomDetail.ProtoReflect.Descriptor instead.
func (*RoomDetail) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{6}
}

func (x *RoomDetail) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoomDetail) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RoomDetail) GetMaxUserNum() int32 {
	if x != nil {
		return x.MaxUserNum
	}
	return 0
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家用户 id | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 角色的详细信息 | @inject_tag: msgpack:"roleInfo" json:"roleInfo"
	RoleInfo *RoleInfo `protobuf:"bytes,2,opt,name=roleInfo,proto3" json:"roleInfo" msgpack:"roleInfo"`
	// 角色的详细信息 | @inject_tag: msgpack:"roleState" json:"roleState"
	RoleState *RoleState `protobuf:"bytes,3,opt,name=roleState,proto3" json:"roleState" msgpack:"roleState"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{7}
}

func (x *Player) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Player) GetRoleInfo() *RoleInfo {
	if x != nil {
		return x.RoleInfo
	}
	return nil
}

func (x *Player) GetRoleState() *RoleState {
	if x != nil {
		return x.RoleState
	}
	return nil
}

type RoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 角色 id | @inject_tag: msgpack:"id" json:"id"
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" msgpack:"id"`
	// @inject_tag: msgpack:"nickname" json:"nickname"
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname" msgpack:"nickname"`
	// 角色相关资源 | @inject_tag: msgpack:"image" json:"image"
	Image int32 `protobuf:"varint,3,opt,name=image,proto3" json:"image" msgpack:"image"`
	// 品质 | @inject_tag: msgpack:"quality" json:"quality"
	Quality int32 `protobuf:"varint,4,opt,name=quality,proto3" json:"quality" msgpack:"quality"`
	// 生命值 | @inject_tag: msgpack:"hp" json:"hp"
	Hp int32 `protobuf:"varint,5,opt,name=hp,proto3" json:"hp" msgpack:"hp"`
	// 防御力 | @inject_tag: msgpack:"def" json:"def"
	Def int32 `protobuf:"varint,6,opt,name=def,proto3" json:"def" msgpack:"def"`
	// 攻击力 | @inject_tag: msgpack:"atk" json:"atk"
	Atk int32 `protobuf:"varint,7,opt,name=atk,proto3" json:"atk" msgpack:"atk"`
	// 原初之力值 | @inject_tag: msgpack:"power" json:"power"
	Power int32 `protobuf:"varint,8,opt,name=power,proto3" json:"power" msgpack:"power"`
	// 技能 id | @inject_tag: msgpack:"skillId" json:"skillId"
	SkillId int32 `protobuf:"varint,9,opt,name=skillId,proto3" json:"skillId" msgpack:"skillId"`
	// 是否是怪物，true 怪物，false 角色 | @inject_tag: msgpack:"isMonster" json:"isMonster"
	IsMonster bool `protobuf:"varint,10,opt,name=isMonster,proto3" json:"isMonster" msgpack:"isMonster"`
	// 角色对应的 nftId | @inject_tag: msgpack:"nftId" json:"nftId"
	NftId int32 `protobuf:"varint,11,opt,name=nftId,proto3" json:"nftId" msgpack:"nftId"`
}

func (x *RoleInfo) Reset() {
	*x = RoleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleInfo) ProtoMessage() {}

func (x *RoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleInfo.ProtoReflect.Descriptor instead.
func (*RoleInfo) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{8}
}

func (x *RoleInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RoleInfo) GetImage() int32 {
	if x != nil {
		return x.Image
	}
	return 0
}

func (x *RoleInfo) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *RoleInfo) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *RoleInfo) GetDef() int32 {
	if x != nil {
		return x.Def
	}
	return 0
}

func (x *RoleInfo) GetAtk() int32 {
	if x != nil {
		return x.Atk
	}
	return 0
}

func (x *RoleInfo) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *RoleInfo) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *RoleInfo) GetIsMonster() bool {
	if x != nil {
		return x.IsMonster
	}
	return false
}

func (x *RoleInfo) GetNftId() int32 {
	if x != nil {
		return x.NftId
	}
	return 0
}

type RoleState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 角色位置 | @inject_tag: msgpack:"pos" json:"pos"
	Pos *RolePosition `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos" msgpack:"pos"`
	// 角色技能信息 | @inject_tag: msgpack:"skill" json:"skill"
	Skill *RoleSkill `protobuf:"bytes,2,opt,name=skill,proto3" json:"skill" msgpack:"skill"`
}

func (x *RoleState) Reset() {
	*x = RoleState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleState) ProtoMessage() {}

func (x *RoleState) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleState.ProtoReflect.Descriptor instead.
func (*RoleState) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{9}
}

func (x *RoleState) GetPos() *RolePosition {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *RoleState) GetSkill() *RoleSkill {
	if x != nil {
		return x.Skill
	}
	return nil
}

// 玩家位置信息
type RolePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// x 轴坐标，0~6 一共 7 列 @inject_tag: msgpack:"x" json:"x"
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x" msgpack:"x"`
	// y 轴坐标 | @inject_tag: msgpack:"y" json:"y"
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y" msgpack:"y"`
}

func (x *RolePosition) Reset() {
	*x = RolePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolePosition) ProtoMessage() {}

func (x *RolePosition) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolePosition.ProtoReflect.Descriptor instead.
func (*RolePosition) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{10}
}

func (x *RolePosition) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *RolePosition) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type RoleSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 技能 id | @inject_tag: msgpack:"id" json:"id"
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" msgpack:"id"`
	// 技能状态 | @inject_tag: msgpack:"state" json:"state"
	State SkillState `protobuf:"varint,2,opt,name=state,proto3,enum=rainbow.v1.SkillState" json:"state" msgpack:"state"`
	// 技能目标。如果目标是自己，则传自己的 uid | @inject_tag: msgpack:"targetUid" json:"targetUid"
	TargetUid int32 `protobuf:"varint,3,opt,name=targetUid,proto3" json:"targetUid" msgpack:"targetUid"`
}

func (x *RoleSkill) Reset() {
	*x = RoleSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleSkill) ProtoMessage() {}

func (x *RoleSkill) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleSkill.ProtoReflect.Descriptor instead.
func (*RoleSkill) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{11}
}

func (x *RoleSkill) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleSkill) GetState() SkillState {
	if x != nil {
		return x.State
	}
	return SkillState_SkillStateEmpty0
}

func (x *RoleSkill) GetTargetUid() int32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

type CsGetNewRoadV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 需要的地图片段索引 | @inject_tag: msgpack:"idx" json:"idx"
	Idx int32 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx" msgpack:"idx"`
}

func (x *CsGetNewRoadV1) Reset() {
	*x = CsGetNewRoadV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsGetNewRoadV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsGetNewRoadV1) ProtoMessage() {}

func (x *CsGetNewRoadV1) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsGetNewRoadV1.ProtoReflect.Descriptor instead.
func (*CsGetNewRoadV1) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{12}
}

func (x *CsGetNewRoadV1) GetIdx() int32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

type BrPlayerDie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 陨落的用户 id | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 角色 id | @inject_tag: msgpack:"roleId" json:"roleId"
	RoleId int32 `protobuf:"varint,2,opt,name=roleId,proto3" json:"roleId" msgpack:"roleId"`
	// 在该位置陨落 | @inject_tag: msgpack:"diePos" json:"diePos"
	DiePos *RolePosition `protobuf:"bytes,3,opt,name=diePos,proto3" json:"diePos" msgpack:"diePos"`
}

func (x *BrPlayerDie) Reset() {
	*x = BrPlayerDie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrPlayerDie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrPlayerDie) ProtoMessage() {}

func (x *BrPlayerDie) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrPlayerDie.ProtoReflect.Descriptor instead.
func (*BrPlayerDie) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{13}
}

func (x *BrPlayerDie) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrPlayerDie) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *BrPlayerDie) GetDiePos() *RolePosition {
	if x != nil {
		return x.DiePos
	}
	return nil
}

type BrGameEndOf1V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 赢方信息 | @inject_tag: msgpack:"winPlayer" json:"winPlayer"
	WinPlayer *Player `protobuf:"bytes,1,opt,name=winPlayer,proto3" json:"winPlayer" msgpack:"winPlayer"`
	// 败方信息 | @inject_tag: msgpack:"losePlayer" json:"losePlayer"
	LosePlayer *Player `protobuf:"bytes,2,opt,name=losePlayer,proto3" json:"losePlayer" msgpack:"losePlayer"`
	// 备注信息 | @inject_tag: msgpack:"desc" json:"desc"
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc" msgpack:"desc"`
	// 结算信息 | @inject_tag: msgpack:"playerSettles" json:"playerSettles"
	PlayerSettles []*PlayerSettleInfo `protobuf:"bytes,4,rep,name=playerSettles,proto3" json:"playerSettles" msgpack:"playerSettles"`
	// 战斗时长，秒数 | @inject_tag: msgpack:"usedTimeSec" json:"usedTimeSec"
	UsedTimeSec int32 `protobuf:"varint,5,opt,name=usedTimeSec,proto3" json:"usedTimeSec" msgpack:"usedTimeSec"`
	// 游戏结束原因信息 | @inject_tag: msgpack:"gameOverInfo" json:"gameOverInfo"
	GameOverType GameOverType `protobuf:"varint,6,opt,name=gameOverType,proto3,enum=rainbow.v1.GameOverType" json:"gameOverInfo" msgpack:"gameOverInfo"`
	// 房间内玩家排名信息 | @inject_tag: msgpack:"rankedPlayers" json:"rankedPlayers"
	RankedPlayers []*Player `protobuf:"bytes,7,rep,name=rankedPlayers,proto3" json:"rankedPlayers" msgpack:"rankedPlayers"`
}

func (x *BrGameEndOf1V1) Reset() {
	*x = BrGameEndOf1V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrGameEndOf1V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrGameEndOf1V1) ProtoMessage() {}

func (x *BrGameEndOf1V1) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrGameEndOf1V1.ProtoReflect.Descriptor instead.
func (*BrGameEndOf1V1) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{14}
}

func (x *BrGameEndOf1V1) GetWinPlayer() *Player {
	if x != nil {
		return x.WinPlayer
	}
	return nil
}

func (x *BrGameEndOf1V1) GetLosePlayer() *Player {
	if x != nil {
		return x.LosePlayer
	}
	return nil
}

func (x *BrGameEndOf1V1) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *BrGameEndOf1V1) GetPlayerSettles() []*PlayerSettleInfo {
	if x != nil {
		return x.PlayerSettles
	}
	return nil
}

func (x *BrGameEndOf1V1) GetUsedTimeSec() int32 {
	if x != nil {
		return x.UsedTimeSec
	}
	return 0
}

func (x *BrGameEndOf1V1) GetGameOverType() GameOverType {
	if x != nil {
		return x.GameOverType
	}
	return GameOverType_GOT_Empty
}

func (x *BrGameEndOf1V1) GetRankedPlayers() []*Player {
	if x != nil {
		return x.RankedPlayers
	}
	return nil
}

// 游戏结束后，玩家的结算信息
type PlayerSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当前距离 | @inject_tag: msgpack:"curDistance" json:"curDistance"
	CurDistance int32 `protobuf:"varint,1,opt,name=curDistance,proto3" json:"curDistance" msgpack:"curDistance"`
	// 最高记录的距离 | @inject_tag: msgpack:"maxDistance" json:"maxDistance"
	MaxDistance int32 `protobuf:"varint,2,opt,name=maxDistance,proto3" json:"maxDistance" msgpack:"maxDistance"`
	// 击杀 boss 的数量 | @inject_tag: msgpack:"killBossNum" json:"killBossNum"
	KillBossNum int32 `protobuf:"varint,3,opt,name=killBossNum,proto3" json:"killBossNum" msgpack:"killBossNum"`
	// 最高生命值 | @inject_tag: msgpack:"maxHp" json:"maxHp"
	MaxHp int32 `protobuf:"varint,4,opt,name=maxHp,proto3" json:"maxHp" msgpack:"maxHp"`
	// 最高攻击力 | @inject_tag: msgpack:"maxAtk" json:"maxAtk"
	MaxAtk int32 `protobuf:"varint,5,opt,name=maxAtk,proto3" json:"maxAtk" msgpack:"maxAtk"`
	// 用户 id | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 角色 id | @inject_tag: msgpack:"roleId" json:"roleId"
	RoleId int32 `protobuf:"varint,7,opt,name=roleId,proto3" json:"roleId" msgpack:"roleId"`
	// 玩家获得的代币数,如果是负数,则表示输掉的 | @inject_tag: msgpack:"gainToken" json:"gainToken"
	GainToken int32 `protobuf:"varint,8,opt,name=gainToken,proto3" json:"gainToken" msgpack:"gainToken"`
	// 1v1时，击倒对手的攻击次数，胜方才有该值 | @inject_tag: msgpack:"hitNum" json:"hitNum"
	HitNum int32 `protobuf:"varint,9,opt,name=hitNum,proto3" json:"hitNum" msgpack:"hitNum"`
	// 被攻击次数 | @inject_tag: msgpack:"beHitNum" json:"beHitNum"
	BeHitNum int32 `protobuf:"varint,11,opt,name=beHitNum,proto3" json:"beHitNum" msgpack:"beHitNum"`
	// 秒伤 | @inject_tag: msgpack:"hurtPerSec" json:"hurtPerSec"
	HurtPerSec int32 `protobuf:"varint,12,opt,name=hurtPerSec,proto3" json:"hurtPerSec" msgpack:"hurtPerSec"`
	// 使用技能次数 | @inject_tag: msgpack:"usedSkillNum" json:"usedSkillNum"
	UsedSkillNum int32 `protobuf:"varint,13,opt,name=usedSkillNum,proto3" json:"usedSkillNum" msgpack:"usedSkillNum"`
	// nft 分值、战力 | @inject_tag: msgpack:"nftScore" json:"nftScore"
	NftScore int32 `protobuf:"varint,14,opt,name=nftScore,proto3" json:"nftScore" msgpack:"nftScore"`
	// 推荐场次的游戏 id | @inject_tag: msgpack:"recGameId" json:"recGameId"
	RecGameId *int32 `protobuf:"varint,15,opt,name=recGameId,proto3,oneof" json:"recGameId" msgpack:"recGameId"`
	// 推荐场次的门票 | @inject_tag: msgpack:"recTicket" json:"recTicket"
	RecTicket *float32 `protobuf:"fixed32,16,opt,name=recTicket,proto3,oneof" json:"recTicket" msgpack:"recTicket"`
	// 推荐场次的奖励 | @inject_tag: msgpack:"recReward" json:"recReward"
	RecReward *float32 `protobuf:"fixed32,17,opt,name=recReward,proto3,oneof" json:"recReward" msgpack:"recReward"`
	// 推荐场次的图片地址 | @inject_tag: msgpack:"recGameImg" json:"recGameImg"
	RecGameImg *string `protobuf:"bytes,18,opt,name=recGameImg,proto3,oneof" json:"recGameImg" msgpack:"recGameImg"`
}

func (x *PlayerSettleInfo) Reset() {
	*x = PlayerSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSettleInfo) ProtoMessage() {}

func (x *PlayerSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSettleInfo.ProtoReflect.Descriptor instead.
func (*PlayerSettleInfo) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{15}
}

func (x *PlayerSettleInfo) GetCurDistance() int32 {
	if x != nil {
		return x.CurDistance
	}
	return 0
}

func (x *PlayerSettleInfo) GetMaxDistance() int32 {
	if x != nil {
		return x.MaxDistance
	}
	return 0
}

func (x *PlayerSettleInfo) GetKillBossNum() int32 {
	if x != nil {
		return x.KillBossNum
	}
	return 0
}

func (x *PlayerSettleInfo) GetMaxHp() int32 {
	if x != nil {
		return x.MaxHp
	}
	return 0
}

func (x *PlayerSettleInfo) GetMaxAtk() int32 {
	if x != nil {
		return x.MaxAtk
	}
	return 0
}

func (x *PlayerSettleInfo) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerSettleInfo) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *PlayerSettleInfo) GetGainToken() int32 {
	if x != nil {
		return x.GainToken
	}
	return 0
}

func (x *PlayerSettleInfo) GetHitNum() int32 {
	if x != nil {
		return x.HitNum
	}
	return 0
}

func (x *PlayerSettleInfo) GetBeHitNum() int32 {
	if x != nil {
		return x.BeHitNum
	}
	return 0
}

func (x *PlayerSettleInfo) GetHurtPerSec() int32 {
	if x != nil {
		return x.HurtPerSec
	}
	return 0
}

func (x *PlayerSettleInfo) GetUsedSkillNum() int32 {
	if x != nil {
		return x.UsedSkillNum
	}
	return 0
}

func (x *PlayerSettleInfo) GetNftScore() int32 {
	if x != nil {
		return x.NftScore
	}
	return 0
}

func (x *PlayerSettleInfo) GetRecGameId() int32 {
	if x != nil && x.RecGameId != nil {
		return *x.RecGameId
	}
	return 0
}

func (x *PlayerSettleInfo) GetRecTicket() float32 {
	if x != nil && x.RecTicket != nil {
		return *x.RecTicket
	}
	return 0
}

func (x *PlayerSettleInfo) GetRecReward() float32 {
	if x != nil && x.RecReward != nil {
		return *x.RecReward
	}
	return 0
}

func (x *PlayerSettleInfo) GetRecGameImg() string {
	if x != nil && x.RecGameImg != nil {
		return *x.RecGameImg
	}
	return ""
}

type ScGetNewRoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 若干段路的数据 | @inject_tag: msgpack:"data" json:"data"
	Data []*OnePassageRoad `protobuf:"bytes,1,rep,name=data,proto3" json:"data" msgpack:"data"`
}

func (x *ScGetNewRoad) Reset() {
	*x = ScGetNewRoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGetNewRoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGetNewRoad) ProtoMessage() {}

func (x *ScGetNewRoad) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGetNewRoad.ProtoReflect.Descriptor instead.
func (*ScGetNewRoad) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{16}
}

func (x *ScGetNewRoad) GetData() []*OnePassageRoad {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScGetNewRoadV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 若干段路的数据 | @inject_tag: msgpack:"data" json:"data"
	Data []*OnePassageRoad `protobuf:"bytes,1,rep,name=data,proto3" json:"data" msgpack:"data"`
}

func (x *ScGetNewRoadV1) Reset() {
	*x = ScGetNewRoadV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGetNewRoadV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGetNewRoadV1) ProtoMessage() {}

func (x *ScGetNewRoadV1) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGetNewRoadV1.ProtoReflect.Descriptor instead.
func (*ScGetNewRoadV1) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{17}
}

func (x *ScGetNewRoadV1) GetData() []*OnePassageRoad {
	if x != nil {
		return x.Data
	}
	return nil
}

// 一段路的格子
type OnePassageRoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 一段路上的若干个格子信息 | @inject_tag: msgpack:"cells" json:"cells"
	Cells []*OneCell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells" msgpack:"cells"`
}

func (x *OnePassageRoad) Reset() {
	*x = OnePassageRoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnePassageRoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnePassageRoad) ProtoMessage() {}

func (x *OnePassageRoad) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnePassageRoad.ProtoReflect.Descriptor instead.
func (*OnePassageRoad) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{18}
}

func (x *OnePassageRoad) GetCells() []*OneCell {
	if x != nil {
		return x.Cells
	}
	return nil
}

// 一个格子
type OneCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 路上的一格，格子信息 | @inject_tag: msgpack:"cellInfo" json:"cellInfo"
	CellInfo []int32 `protobuf:"varint,1,rep,packed,name=cellInfo,proto3" json:"cellInfo" msgpack:"cellInfo"`
}

func (x *OneCell) Reset() {
	*x = OneCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneCell) ProtoMessage() {}

func (x *OneCell) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneCell.ProtoReflect.Descriptor instead.
func (*OneCell) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{19}
}

func (x *OneCell) GetCellInfo() []int32 {
	if x != nil {
		return x.CellInfo
	}
	return nil
}

type ScBossFightRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 角色生命值 | @inject_tag: msgpack:"flag" json:"flag"
	RoleHp int32 `protobuf:"varint,1,opt,name=roleHp,proto3" json:"flag" msgpack:"flag"`
	// 获得的金币数 | @inject_tag: msgpack:"goldNum" json:"goldNum"
	GoldNum int32 `protobuf:"varint,2,opt,name=goldNum,proto3" json:"goldNum" msgpack:"goldNum"`
	// 宝箱掉落情况 | @inject_tag: msgpack:"crates" json:"crates"
	Crates map[int32]int32 `protobuf:"bytes,3,rep,name=crates,proto3" json:"crates" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" msgpack:"crates"`
	// 先手情况。0表示玩家先手，1表示 boss 先手；| @inject_tag: msgpack:"flag" json:"flag"
	Flag int32 `protobuf:"varint,4,opt,name=flag,proto3" json:"flag" msgpack:"flag"`
}

func (x *ScBossFightRes) Reset() {
	*x = ScBossFightRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScBossFightRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScBossFightRes) ProtoMessage() {}

func (x *ScBossFightRes) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScBossFightRes.ProtoReflect.Descriptor instead.
func (*ScBossFightRes) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{20}
}

func (x *ScBossFightRes) GetRoleHp() int32 {
	if x != nil {
		return x.RoleHp
	}
	return 0
}

func (x *ScBossFightRes) GetGoldNum() int32 {
	if x != nil {
		return x.GoldNum
	}
	return 0
}

func (x *ScBossFightRes) GetCrates() map[int32]int32 {
	if x != nil {
		return x.Crates
	}
	return nil
}

func (x *ScBossFightRes) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type ScPickItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家的生命值 | @inject_tag: msgpack:"hp" json:"hp"
	Hp int32 `protobuf:"varint,1,opt,name=hp,proto3" json:"hp" msgpack:"hp"`
	// 玩家的攻击力 | @inject_tag: msgpack:"atk" json:"atk"
	Atk int32 `protobuf:"varint,2,opt,name=atk,proto3" json:"atk" msgpack:"atk"`
	// 玩家的原初之力 | @inject_tag: msgpack:"power" json:"power"
	Power int32 `protobuf:"varint,3,opt,name=power,proto3" json:"power" msgpack:"power"`
}

func (x *ScPickItemReq) Reset() {
	*x = ScPickItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScPickItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScPickItemReq) ProtoMessage() {}

func (x *ScPickItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScPickItemReq.ProtoReflect.Descriptor instead.
func (*ScPickItemReq) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{21}
}

func (x *ScPickItemReq) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *ScPickItemReq) GetAtk() int32 {
	if x != nil {
		return x.Atk
	}
	return 0
}

func (x *ScPickItemReq) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

type CsJudgeOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 列，位置的 x 坐标值，从 0 开始计数 | @inject_tag: msgpack:"x" json:"x"
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x" msgpack:"x"`
	// 行，位置的 y 坐标值，从 0 开始计数 | @inject_tag: msgpack:"y" json:"y"
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y" msgpack:"y"`
	// 操作类型 | @inject_tag: msgpack:"opType" json:"opType"
	OpType OperateType `protobuf:"varint,3,opt,name=opType,proto3,enum=rainbow.v1.OperateType" json:"opType" msgpack:"opType"`
}

func (x *CsJudgeOpt) Reset() {
	*x = CsJudgeOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsJudgeOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsJudgeOpt) ProtoMessage() {}

func (x *CsJudgeOpt) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsJudgeOpt.ProtoReflect.Descriptor instead.
func (*CsJudgeOpt) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{22}
}

func (x *CsJudgeOpt) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CsJudgeOpt) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *CsJudgeOpt) GetOpType() OperateType {
	if x != nil {
		return x.OpType
	}
	return OperateType_OptEmpty
}

type BrPickItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 奖励类型 | @inject_tag: msgpack:"awardType" json:"awardType"
	AwardType AwardType `protobuf:"varint,2,opt,name=awardType,proto3,enum=rainbow.v1.AwardType" json:"awardType" msgpack:"awardType"`
	// 对应的值,如生命值,攻击力等.可能是负值 | @inject_tag: msgpack:"awardVal" json:"awardVal"
	AwardVal int32 `protobuf:"varint,3,opt,name=awardVal,proto3" json:"awardVal" msgpack:"awardVal"`
	// 属性更新后的最终值 | @inject_tag: msgpack:"resVal" json:"resVal"
	ResVal int32 `protobuf:"varint,4,opt,name=resVal,proto3" json:"resVal" msgpack:"resVal"`
}

func (x *BrPickItem) Reset() {
	*x = BrPickItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrPickItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrPickItem) ProtoMessage() {}

func (x *BrPickItem) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrPickItem.ProtoReflect.Descriptor instead.
func (*BrPickItem) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{23}
}

func (x *BrPickItem) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrPickItem) GetAwardType() AwardType {
	if x != nil {
		return x.AwardType
	}
	return AwardType_AwardTypeEmpty
}

func (x *BrPickItem) GetAwardVal() int32 {
	if x != nil {
		return x.AwardVal
	}
	return 0
}

func (x *BrPickItem) GetResVal() int32 {
	if x != nil {
		return x.ResVal
	}
	return 0
}

// 玩家掉落后,复活后回退数格后的位置信息
type BrPlayerRollback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 角色所在坐标 | @inject_tag: msgpack:"newPos" json:"newPos"
	NewPos *RolePosition `protobuf:"bytes,2,opt,name=newPos,proto3" json:"newPos" msgpack:"newPos"`
}

func (x *BrPlayerRollback) Reset() {
	*x = BrPlayerRollback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrPlayerRollback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrPlayerRollback) ProtoMessage() {}

func (x *BrPlayerRollback) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrPlayerRollback.ProtoReflect.Descriptor instead.
func (*BrPlayerRollback) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{24}
}

func (x *BrPlayerRollback) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrPlayerRollback) GetNewPos() *RolePosition {
	if x != nil {
		return x.NewPos
	}
	return nil
}

type BrRolePositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 房间内玩家信息 | @inject_tag: msgpack:"roomDetail" json:"roomDetail"
	RoomDetail *RoomDetail `protobuf:"bytes,1,opt,name=roomDetail,proto3" json:"roomDetail" msgpack:"roomDetail"`
	// 游戏开始多久了，毫秒 | @inject_tag: msgpack:"gameHasKeptSec" json:"gameHasKeptSec"
	GameHasKeptSec int32 `protobuf:"varint,2,opt,name=gameHasKeptSec,proto3" json:"gameHasKeptSec" msgpack:"gameHasKeptSec"`
	// 服务器时间，毫秒时间戳 | @inject_tag: msgpack:"serverTime" json:"serverTime"
	ServerTime uint64 `protobuf:"varint,3,opt,name=serverTime,proto3" json:"serverTime" msgpack:"serverTime"`
}

func (x *BrRolePositions) Reset() {
	*x = BrRolePositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrRolePositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrRolePositions) ProtoMessage() {}

func (x *BrRolePositions) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrRolePositions.ProtoReflect.Descriptor instead.
func (*BrRolePositions) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{25}
}

func (x *BrRolePositions) GetRoomDetail() *RoomDetail {
	if x != nil {
		return x.RoomDetail
	}
	return nil
}

func (x *BrRolePositions) GetGameHasKeptSec() int32 {
	if x != nil {
		return x.GameHasKeptSec
	}
	return 0
}

func (x *BrRolePositions) GetServerTime() uint64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

type ScGetRolePos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当前玩家的角色位置信息 | @inject_tag: msgpack:"pos" json:"pos"
	Pos *RolePosition `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos" msgpack:"pos"`
}

func (x *ScGetRolePos) Reset() {
	*x = ScGetRolePos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGetRolePos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGetRolePos) ProtoMessage() {}

func (x *ScGetRolePos) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGetRolePos.ProtoReflect.Descriptor instead.
func (*ScGetRolePos) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{26}
}

func (x *ScGetRolePos) GetPos() *RolePosition {
	if x != nil {
		return x.Pos
	}
	return nil
}

type BrRoleReachPivot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 枢纽的 y 坐标值 | @inject_tag: msgpack:"pivotY" json:"pivotY"
	PivotY int32 `protobuf:"varint,2,opt,name=pivotY,proto3" json:"pivotY" msgpack:"pivotY"`
}

func (x *BrRoleReachPivot) Reset() {
	*x = BrRoleReachPivot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrRoleReachPivot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrRoleReachPivot) ProtoMessage() {}

func (x *BrRoleReachPivot) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrRoleReachPivot.ProtoReflect.Descriptor instead.
func (*BrRoleReachPivot) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{27}
}

func (x *BrRoleReachPivot) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrRoleReachPivot) GetPivotY() int32 {
	if x != nil {
		return x.PivotY
	}
	return 0
}

type BrRolePivotFightEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 是否胜利 | @inject_tag: msgpack:"isWin" json:"isWin"
	IsWin bool `protobuf:"varint,2,opt,name=isWin,proto3" json:"isWin" msgpack:"isWin"`
}

func (x *BrRolePivotFightEnd) Reset() {
	*x = BrRolePivotFightEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrRolePivotFightEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrRolePivotFightEnd) ProtoMessage() {}

func (x *BrRolePivotFightEnd) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrRolePivotFightEnd.ProtoReflect.Descriptor instead.
func (*BrRolePivotFightEnd) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{28}
}

func (x *BrRolePivotFightEnd) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrRolePivotFightEnd) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

type BrGameStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 路程总长度 | @inject_tag: msgpack:"allDistance" json:"allDistance"
	AllDistance int32 `protobuf:"varint,2,opt,name=allDistance,proto3" json:"allDistance" msgpack:"allDistance"`
	// 房间内玩家信息 | @inject_tag: msgpack:"roomDetail" json:"roomDetail"
	RoomDetail *RoomDetail `protobuf:"bytes,3,opt,name=roomDetail,proto3" json:"roomDetail" msgpack:"roomDetail"`
}

func (x *BrGameStart) Reset() {
	*x = BrGameStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrGameStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrGameStart) ProtoMessage() {}

func (x *BrGameStart) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrGameStart.ProtoReflect.Descriptor instead.
func (*BrGameStart) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{29}
}

func (x *BrGameStart) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrGameStart) GetAllDistance() int32 {
	if x != nil {
		return x.AllDistance
	}
	return 0
}

func (x *BrGameStart) GetRoomDetail() *RoomDetail {
	if x != nil {
		return x.RoomDetail
	}
	return nil
}

type CsUseSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 技能目标。如果目标是自己，则传自己的 uid | @inject_tag: msgpack:"targetUid" json:"targetUid"
	TargetUid int32 `protobuf:"varint,1,opt,name=targetUid,proto3" json:"targetUid" msgpack:"targetUid"`
}

func (x *CsUseSkill) Reset() {
	*x = CsUseSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsUseSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsUseSkill) ProtoMessage() {}

func (x *CsUseSkill) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsUseSkill.ProtoReflect.Descriptor instead.
func (*CsUseSkill) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{30}
}

func (x *CsUseSkill) GetTargetUid() int32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

// 技能：位移
type ScSkillDisplacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 位移后的位置 | @inject_tag: msgpack:"newPos" json:"newPos"
	NewPos *RolePosition `protobuf:"bytes,1,opt,name=newPos,proto3" json:"newPos" msgpack:"newPos"`
}

func (x *ScSkillDisplacement) Reset() {
	*x = ScSkillDisplacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSkillDisplacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSkillDisplacement) ProtoMessage() {}

func (x *ScSkillDisplacement) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSkillDisplacement.ProtoReflect.Descriptor instead.
func (*ScSkillDisplacement) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{31}
}

func (x *ScSkillDisplacement) GetNewPos() *RolePosition {
	if x != nil {
		return x.NewPos
	}
	return nil
}

// 技能效果生效信息-僵直
type ScSkillEffectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
	KeepSec int32 `protobuf:"varint,2,opt,name=keepSec,proto3" json:"keepSec" msgpack:"keepSec"`
	// 技能效果类型 | @inject_tag: msgpack:"effType" json:"effType"
	EffType EffectType `protobuf:"varint,3,opt,name=effType,proto3,enum=rainbow.v1.EffectType" json:"effType" msgpack:"effType"`
	// 受影响的玩家 id | @inject_tag: msgpack:"effUidArr" json:"effUidArr"
	EffUidArr []int32 `protobuf:"varint,4,rep,packed,name=effUidArr,proto3" json:"effUidArr" msgpack:"effUidArr"`
	// 施术的时间，毫秒时间戳 | @inject_tag: msgpack:"startTime" json:"startTime"
	StartTime int64 `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime" msgpack:"startTime"`
}

func (x *ScSkillEffectInfo) Reset() {
	*x = ScSkillEffectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSkillEffectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSkillEffectInfo) ProtoMessage() {}

func (x *ScSkillEffectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSkillEffectInfo.ProtoReflect.Descriptor instead.
func (*ScSkillEffectInfo) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{32}
}

func (x *ScSkillEffectInfo) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *ScSkillEffectInfo) GetKeepSec() int32 {
	if x != nil {
		return x.KeepSec
	}
	return 0
}

func (x *ScSkillEffectInfo) GetEffType() EffectType {
	if x != nil {
		return x.EffType
	}
	return EffectType_Effect0Normal
}

func (x *ScSkillEffectInfo) GetEffUidArr() []int32 {
	if x != nil {
		return x.EffUidArr
	}
	return nil
}

func (x *ScSkillEffectInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// 技能：迷雾
type ScSkillFog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
	KeepSec int32 `protobuf:"varint,2,opt,name=keepSec,proto3" json:"keepSec" msgpack:"keepSec"`
	// 横向格子数.eg:3,表示从当前纵坐标开始向左数3列，再向右数3列，这个范围内的有雾 | @inject_tag: msgpack:"xNum" json:"xNum"
	XNum int32 `protobuf:"varint,4,opt,name=xNum,proto3" json:"xNum" msgpack:"xNum"`
	// 纵向格子数 | @inject_tag: msgpack:"yNum" json:"yNum"
	YNum int32 `protobuf:"varint,5,opt,name=yNum,proto3" json:"yNum" msgpack:"yNum"`
	// 区域类型。2前方最近；5后方最近；10前方，特定格子数 | @inject_tag: msgpack:"rangeType" json:"rangeType"
	RangeType int32 `protobuf:"varint,6,opt,name=rangeType,proto3" json:"rangeType" msgpack:"rangeType"`
	// 受影响的玩家 uid 列表 | @inject_tag: msgpack:"effUidArr" json:"effUidArr"
	EffUidArr []int32 `protobuf:"varint,7,rep,packed,name=effUidArr,proto3" json:"effUidArr" msgpack:"effUidArr"`
	// 施术的时间，毫秒时间戳 | @inject_tag: msgpack:"startTime" json:"startTime"
	StartTime int64 `protobuf:"varint,8,opt,name=startTime,proto3" json:"startTime" msgpack:"startTime"`
}

func (x *ScSkillFog) Reset() {
	*x = ScSkillFog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSkillFog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSkillFog) ProtoMessage() {}

func (x *ScSkillFog) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSkillFog.ProtoReflect.Descriptor instead.
func (*ScSkillFog) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{33}
}

func (x *ScSkillFog) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *ScSkillFog) GetKeepSec() int32 {
	if x != nil {
		return x.KeepSec
	}
	return 0
}

func (x *ScSkillFog) GetXNum() int32 {
	if x != nil {
		return x.XNum
	}
	return 0
}

func (x *ScSkillFog) GetYNum() int32 {
	if x != nil {
		return x.YNum
	}
	return 0
}

func (x *ScSkillFog) GetRangeType() int32 {
	if x != nil {
		return x.RangeType
	}
	return 0
}

func (x *ScSkillFog) GetEffUidArr() []int32 {
	if x != nil {
		return x.EffUidArr
	}
	return nil
}

func (x *ScSkillFog) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// 技能：吸收
type ScSkillAttract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
	KeepSec int32 `protobuf:"varint,2,opt,name=keepSec,proto3" json:"keepSec" msgpack:"keepSec"`
	// 向前范围的格子数 | @inject_tag: msgpack:"yNum" json:"yNum"
	YNum int32 `protobuf:"varint,3,opt,name=yNum,proto3" json:"yNum" msgpack:"yNum"`
	// 可吸取的石格类型列表 | @inject_tag: msgpack:"stTypes" json:"stTypes"
	// 石格类型：100原初之力+1；102 hp+；104 hp-；106 atk+；108 atk-
	// repeated int32 stTypes = 4;
	// 可吸收的格子位置列表 | @inject_tag: msgpack:"stones" json:"stones"
	Stones []*OneStone `protobuf:"bytes,5,rep,name=stones,proto3" json:"stones" msgpack:"stones"`
}

func (x *ScSkillAttract) Reset() {
	*x = ScSkillAttract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSkillAttract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSkillAttract) ProtoMessage() {}

func (x *ScSkillAttract) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSkillAttract.ProtoReflect.Descriptor instead.
func (*ScSkillAttract) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{34}
}

func (x *ScSkillAttract) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *ScSkillAttract) GetKeepSec() int32 {
	if x != nil {
		return x.KeepSec
	}
	return 0
}

func (x *ScSkillAttract) GetYNum() int32 {
	if x != nil {
		return x.YNum
	}
	return 0
}

func (x *ScSkillAttract) GetStones() []*OneStone {
	if x != nil {
		return x.Stones
	}
	return nil
}

type OneStone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 一个格子信息 | @inject_tag: msgpack:"stone" json:"stone"
	Stone []int32 `protobuf:"varint,1,rep,packed,name=stone,proto3" json:"stone" msgpack:"stone"`
}

func (x *OneStone) Reset() {
	*x = OneStone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneStone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneStone) ProtoMessage() {}

func (x *OneStone) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneStone.ProtoReflect.Descriptor instead.
func (*OneStone) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{35}
}

func (x *OneStone) GetStone() []int32 {
	if x != nil {
		return x.Stone
	}
	return nil
}

// 角色施放技能广播
type BrRoleSkillRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 技能 id | @inject_tag: msgpack:"skillId" json:"skillId"
	SkillId int32 `protobuf:"varint,2,opt,name=skillId,proto3" json:"skillId" msgpack:"skillId"`
	// 技能效果 id，一个技能会有多个效果，逐个结算效果 | @inject_tag: msgpack:"effId" json:"effId"
	EffId int32 `protobuf:"varint,3,opt,name=effId,proto3" json:"effId" msgpack:"effId"`
	// 技能效果类型 | @inject_tag: msgpack:"effType" json:"effType"
	EffType EffectType `protobuf:"varint,4,opt,name=effType,proto3,enum=rainbow.v1.EffectType" json:"effType" msgpack:"effType"`
	// 技能施放的时间戳，毫秒 | @inject_tag: msgpack:"startTime" json:"startTime"
	StartTime int64 `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime" msgpack:"startTime"`
	// 施放的目标 uid 列表 | @inject_tag: msgpack:"effUidArr" json:"effUidArr"
	EffUidArr []int32 `protobuf:"varint,6,rep,packed,name=effUidArr,proto3" json:"effUidArr" msgpack:"effUidArr"`
	// 技能效果结算相关值，多个数值，可能是浮点数，整数 | @inject_tag: msgpack:"effValues" json:"effValues"
	EffValues []string `protobuf:"bytes,7,rep,name=effValues,proto3" json:"effValues" msgpack:"effValues"`
	// 特殊：可吸收的格子位置列表 | @inject_tag: msgpack:"stones" json:"stones"
	Stones []*OneStone `protobuf:"bytes,8,rep,name=stones,proto3" json:"stones" msgpack:"stones"`
	// 特殊：分身所在列 | @inject_tag: msgpack:"shadowDexArr" json:"shadowDexArr"
	ShadowDexArr []int32 `protobuf:"varint,9,rep,packed,name=shadowDexArr,proto3" json:"shadowDexArr" msgpack:"shadowDexArr"`
	// 技能施放的唯一标识 | @inject_tag: msgpack:"releaseUuid" json:"releaseUuid"
	ReleaseUuid string `protobuf:"bytes,10,opt,name=releaseUuid,proto3" json:"releaseUuid" msgpack:"releaseUuid"`
}

func (x *BrRoleSkillRelease) Reset() {
	*x = BrRoleSkillRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrRoleSkillRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrRoleSkillRelease) ProtoMessage() {}

func (x *BrRoleSkillRelease) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrRoleSkillRelease.ProtoReflect.Descriptor instead.
func (*BrRoleSkillRelease) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{36}
}

func (x *BrRoleSkillRelease) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *BrRoleSkillRelease) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *BrRoleSkillRelease) GetEffId() int32 {
	if x != nil {
		return x.EffId
	}
	return 0
}

func (x *BrRoleSkillRelease) GetEffType() EffectType {
	if x != nil {
		return x.EffType
	}
	return EffectType_Effect0Normal
}

func (x *BrRoleSkillRelease) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BrRoleSkillRelease) GetEffUidArr() []int32 {
	if x != nil {
		return x.EffUidArr
	}
	return nil
}

func (x *BrRoleSkillRelease) GetEffValues() []string {
	if x != nil {
		return x.EffValues
	}
	return nil
}

func (x *BrRoleSkillRelease) GetStones() []*OneStone {
	if x != nil {
		return x.Stones
	}
	return nil
}

func (x *BrRoleSkillRelease) GetShadowDexArr() []int32 {
	if x != nil {
		return x.ShadowDexArr
	}
	return nil
}

func (x *BrRoleSkillRelease) GetReleaseUuid() string {
	if x != nil {
		return x.ReleaseUuid
	}
	return ""
}

// 广播技能施放结束
type BrRoleSkillReleaseEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 技能施放的唯一标识，表示该技能结束 | @inject_tag: msgpack:"releaseUuid" json:"releaseUuid"
	ReleaseUuid string `protobuf:"bytes,1,opt,name=releaseUuid,proto3" json:"releaseUuid" msgpack:"releaseUuid"`
	// 技能 id | @inject_tag: msgpack:"skillId" json:"skillId"
	SkillId int32 `protobuf:"varint,2,opt,name=skillId,proto3" json:"skillId" msgpack:"skillId"`
	// 技能效果 id | @inject_tag: msgpack:"effId" json:"effId"
	EffId int32 `protobuf:"varint,3,opt,name=effId,proto3" json:"effId" msgpack:"effId"`
	// 技能效果类型 | @inject_tag: msgpack:"effType" json:"effType"
	EffType EffectType `protobuf:"varint,4,opt,name=effType,proto3,enum=rainbow.v1.EffectType" json:"effType" msgpack:"effType"`
	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,5,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 技能结束后，同步一些数据 | @inject_tag: msgpack:"data" json:"data"
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data" msgpack:"data"`
}

func (x *BrRoleSkillReleaseEnd) Reset() {
	*x = BrRoleSkillReleaseEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrRoleSkillReleaseEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrRoleSkillReleaseEnd) ProtoMessage() {}

func (x *BrRoleSkillReleaseEnd) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrRoleSkillReleaseEnd.ProtoReflect.Descriptor instead.
func (*BrRoleSkillReleaseEnd) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{37}
}

func (x *BrRoleSkillReleaseEnd) GetReleaseUuid() string {
	if x != nil {
		return x.ReleaseUuid
	}
	return ""
}

func (x *BrRoleSkillReleaseEnd) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *BrRoleSkillReleaseEnd) GetEffId() int32 {
	if x != nil {
		return x.EffId
	}
	return 0
}

func (x *BrRoleSkillReleaseEnd) GetEffType() EffectType {
	if x != nil {
		return x.EffType
	}
	return EffectType_Effect0Normal
}

func (x *BrRoleSkillReleaseEnd) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *BrRoleSkillReleaseEnd) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type BrRoleSkillEndForShadow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分身施放结束后，角色属性信息 | @inject_tag: msgpack:"player" json:"player"
	Player *Player `protobuf:"bytes,1,opt,name=player,proto3" json:"player" msgpack:"player"`
}

func (x *BrRoleSkillEndForShadow) Reset() {
	*x = BrRoleSkillEndForShadow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrRoleSkillEndForShadow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrRoleSkillEndForShadow) ProtoMessage() {}

func (x *BrRoleSkillEndForShadow) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrRoleSkillEndForShadow.ProtoReflect.Descriptor instead.
func (*BrRoleSkillEndForShadow) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{38}
}

func (x *BrRoleSkillEndForShadow) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

// 技能：分身
type ScSkillShadow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
	KeepSec int32 `protobuf:"varint,2,opt,name=keepSec,proto3" json:"keepSec" msgpack:"keepSec"`
	// 分身数量 | @inject_tag: msgpack:"num" json:"num"
	Num int32 `protobuf:"varint,3,opt,name=num,proto3" json:"num" msgpack:"num"`
	// 分身出现在这些 x 坐标位置，y 坐标与本体一致 | @inject_tag: msgpack:"xList" json:"xList"
	XList []int32 `protobuf:"varint,4,rep,packed,name=xList,proto3" json:"xList" msgpack:"xList"`
}

func (x *ScSkillShadow) Reset() {
	*x = ScSkillShadow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSkillShadow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSkillShadow) ProtoMessage() {}

func (x *ScSkillShadow) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSkillShadow.ProtoReflect.Descriptor instead.
func (*ScSkillShadow) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{39}
}

func (x *ScSkillShadow) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *ScSkillShadow) GetKeepSec() int32 {
	if x != nil {
		return x.KeepSec
	}
	return 0
}

func (x *ScSkillShadow) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ScSkillShadow) GetXList() []int32 {
	if x != nil {
		return x.XList
	}
	return nil
}

type ScSkillDeBuffHp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
	KeepSec int32 `protobuf:"varint,2,opt,name=keepSec,proto3" json:"keepSec" msgpack:"keepSec"`
	// 生命值每秒降低的值 | @inject_tag: msgpack:"valPerSec" json:"valPerSec"
	ValPerSec int32 `protobuf:"varint,3,opt,name=valPerSec,proto3" json:"valPerSec" msgpack:"valPerSec"`
}

func (x *ScSkillDeBuffHp) Reset() {
	*x = ScSkillDeBuffHp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSkillDeBuffHp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSkillDeBuffHp) ProtoMessage() {}

func (x *ScSkillDeBuffHp) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSkillDeBuffHp.ProtoReflect.Descriptor instead.
func (*ScSkillDeBuffHp) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{40}
}

func (x *ScSkillDeBuffHp) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *ScSkillDeBuffHp) GetKeepSec() int32 {
	if x != nil {
		return x.KeepSec
	}
	return 0
}

func (x *ScSkillDeBuffHp) GetValPerSec() int32 {
	if x != nil {
		return x.ValPerSec
	}
	return 0
}

type ScSkillDeBuffAtk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
	KeepSec int32 `protobuf:"varint,2,opt,name=keepSec,proto3" json:"keepSec" msgpack:"keepSec"`
	// 降低的值 | @inject_tag: msgpack:"val" json:"val"
	Val int32 `protobuf:"varint,3,opt,name=val,proto3" json:"val" msgpack:"val"`
}

func (x *ScSkillDeBuffAtk) Reset() {
	*x = ScSkillDeBuffAtk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSkillDeBuffAtk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSkillDeBuffAtk) ProtoMessage() {}

func (x *ScSkillDeBuffAtk) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSkillDeBuffAtk.ProtoReflect.Descriptor instead.
func (*ScSkillDeBuffAtk) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{41}
}

func (x *ScSkillDeBuffAtk) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *ScSkillDeBuffAtk) GetKeepSec() int32 {
	if x != nil {
		return x.KeepSec
	}
	return 0
}

func (x *ScSkillDeBuffAtk) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

type ScSkillBuffAtk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
	KeepSec int32 `protobuf:"varint,2,opt,name=keepSec,proto3" json:"keepSec" msgpack:"keepSec"`
	// 降低的值 | @inject_tag: msgpack:"val" json:"val"
	Val int32 `protobuf:"varint,3,opt,name=val,proto3" json:"val" msgpack:"val"`
}

func (x *ScSkillBuffAtk) Reset() {
	*x = ScSkillBuffAtk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSkillBuffAtk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSkillBuffAtk) ProtoMessage() {}

func (x *ScSkillBuffAtk) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSkillBuffAtk.ProtoReflect.Descriptor instead.
func (*ScSkillBuffAtk) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{42}
}

func (x *ScSkillBuffAtk) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *ScSkillBuffAtk) GetKeepSec() int32 {
	if x != nil {
		return x.KeepSec
	}
	return 0
}

func (x *ScSkillBuffAtk) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

type ScSkillFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
	KeepSec int32 `protobuf:"varint,2,opt,name=keepSec,proto3" json:"keepSec" msgpack:"keepSec"`
}

func (x *ScSkillFloat) Reset() {
	*x = ScSkillFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSkillFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSkillFloat) ProtoMessage() {}

func (x *ScSkillFloat) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSkillFloat.ProtoReflect.Descriptor instead.
func (*ScSkillFloat) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{43}
}

func (x *ScSkillFloat) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *ScSkillFloat) GetKeepSec() int32 {
	if x != nil {
		return x.KeepSec
	}
	return 0
}

type ScSkillSprint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 距离，格子数 | @inject_tag: msgpack:"distanceNum" json:"distanceNum"
	DistanceNum int32 `protobuf:"varint,2,opt,name=distanceNum,proto3" json:"distanceNum" msgpack:"distanceNum"`
	// 单位时间内，y 方向上移动的的格子数 | @inject_tag: msgpack:"speed" json:"speed"
	Speed int32 `protobuf:"varint,3,opt,name=speed,proto3" json:"speed" msgpack:"speed"`
}

func (x *ScSkillSprint) Reset() {
	*x = ScSkillSprint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSkillSprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSkillSprint) ProtoMessage() {}

func (x *ScSkillSprint) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSkillSprint.ProtoReflect.Descriptor instead.
func (*ScSkillSprint) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{44}
}

func (x *ScSkillSprint) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *ScSkillSprint) GetDistanceNum() int32 {
	if x != nil {
		return x.DistanceNum
	}
	return 0
}

func (x *ScSkillSprint) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

// 技能：抵挡伤害
type ScSkillResistHurt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 次数 | @inject_tag: msgpack:"times" json:"times"
	Times int32 `protobuf:"varint,2,opt,name=times,proto3" json:"times" msgpack:"times"`
	// 抵挡的伤害系数 | @inject_tag: msgpack:"scale" json:"scale"
	Scale float32 `protobuf:"fixed32,3,opt,name=scale,proto3" json:"scale" msgpack:"scale"`
}

func (x *ScSkillResistHurt) Reset() {
	*x = ScSkillResistHurt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSkillResistHurt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSkillResistHurt) ProtoMessage() {}

func (x *ScSkillResistHurt) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSkillResistHurt.ProtoReflect.Descriptor instead.
func (*ScSkillResistHurt) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{45}
}

func (x *ScSkillResistHurt) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *ScSkillResistHurt) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *ScSkillResistHurt) GetScale() float32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type ScSkillResistHurtEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 技能 id | @inject_tag: msgpack:"skillId" json:"skillId"
	SkillId int32 `protobuf:"varint,2,opt,name=skillId,proto3" json:"skillId" msgpack:"skillId"`
	// 技能效果 id | @inject_tag: msgpack:"skillEffId" json:"skillEffId"
	SkillEffId int32 `protobuf:"varint,3,opt,name=skillEffId,proto3" json:"skillEffId" msgpack:"skillEffId"`
}

func (x *ScSkillResistHurtEnd) Reset() {
	*x = ScSkillResistHurtEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSkillResistHurtEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSkillResistHurtEnd) ProtoMessage() {}

func (x *ScSkillResistHurtEnd) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSkillResistHurtEnd.ProtoReflect.Descriptor instead.
func (*ScSkillResistHurtEnd) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{46}
}

func (x *ScSkillResistHurtEnd) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *ScSkillResistHurtEnd) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *ScSkillResistHurtEnd) GetSkillEffId() int32 {
	if x != nil {
		return x.SkillEffId
	}
	return 0
}

// buff 效果
// ref: https://zhuanlan.zhihu.com/p/150812545
type Buff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 生效类型。按次数生效或这时间生效 | @inject_tag: msgpack:"effMode" json:"effMode"
	EffMode BuffEffMode `protobuf:"varint,1,opt,name=effMode,proto3,enum=rainbow.v1.BuffEffMode" json:"effMode" msgpack:"effMode"`
	// 生效类型下对应的值。eg:按次数生效，这里存储剩余次数 | @inject_tag: msgpack:"effModeValue" json:"effModeValue"
	EffModeValue int32 `protobuf:"varint,2,opt,name=effModeValue,proto3" json:"effModeValue" msgpack:"effModeValue"`
	// buff 优先级，低优先级不能打断高优先级 buff | @inject_tag: msgpack:"priority" json:"priority"
	Priority int32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority" msgpack:"priority"`
	// buff 开始生效的时间戳 | @inject_tag: msgpack:"startTime" json:"startTime"
	StartTime int32 `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime" msgpack:"startTime"`
	// buff 生效结束的时间戳 | @inject_tag: msgpack:"endTime" json:"endTime"
	EndTime int32 `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime" msgpack:"endTime"`
	// 对应的技能效果 id | @inject_tag: msgpack:"skillEffId" json:"skillEffId"
	SkillEffId int32 `protobuf:"varint,6,opt,name=skillEffId,proto3" json:"skillEffId" msgpack:"skillEffId"`
	// 对应的技能效果类型 | @inject_tag: msgpack:"skillEffType" json:"skillEffType"
	SkillEffType int32 `protobuf:"varint,7,opt,name=skillEffType,proto3" json:"skillEffType" msgpack:"skillEffType"`
	// buff 作用的角色属性 | @inject_tag: msgpack:"effRoleAttr" json:"effRoleAttr"
	EffRoleAttr BuffRoleAttr `protobuf:"varint,8,opt,name=effRoleAttr,proto3,enum=rainbow.v1.BuffRoleAttr" json:"effRoleAttr" msgpack:"effRoleAttr"`
	// buff 的控制效果 | @inject_tag: msgpack:"controlEff" json:"controlEff"
	ControlEff ControlEff `protobuf:"varint,9,opt,name=controlEff,proto3,enum=rainbow.v1.ControlEff" json:"controlEff" msgpack:"controlEff"`
	// buff 的生效时机。eg:被攻击前生效/被攻击后生效/被攻击时生效/攻击别人前生效/攻击后生效 etc | @inject_tag: msgpack:"effTiming" json:"effTiming"
	EffTiming EffTiming `protobuf:"varint,10,opt,name=effTiming,proto3,enum=rainbow.v1.EffTiming" json:"effTiming" msgpack:"effTiming"`
	// 效果发起人 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,11,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 效果相关的参数值 | @inject_tag: msgpack:"effValues" json:"effValues"
	EffValues []string `protobuf:"bytes,12,rep,name=effValues,proto3" json:"effValues" msgpack:"effValues"`
	// 受效果影响的用户 id 列表 | @inject_tag: msgpack:"effUidList" json:"effUidList"
	EffUidList []int32 `protobuf:"varint,13,rep,packed,name=effUidList,proto3" json:"effUidList" msgpack:"effUidList"`
}

func (x *Buff) Reset() {
	*x = Buff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buff) ProtoMessage() {}

func (x *Buff) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buff.ProtoReflect.Descriptor instead.
func (*Buff) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{47}
}

func (x *Buff) GetEffMode() BuffEffMode {
	if x != nil {
		return x.EffMode
	}
	return BuffEffMode_BuffEffModeEmpty
}

func (x *Buff) GetEffModeValue() int32 {
	if x != nil {
		return x.EffModeValue
	}
	return 0
}

func (x *Buff) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Buff) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Buff) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Buff) GetSkillEffId() int32 {
	if x != nil {
		return x.SkillEffId
	}
	return 0
}

func (x *Buff) GetSkillEffType() int32 {
	if x != nil {
		return x.SkillEffType
	}
	return 0
}

func (x *Buff) GetEffRoleAttr() BuffRoleAttr {
	if x != nil {
		return x.EffRoleAttr
	}
	return BuffRoleAttr_BuffRoleAttrEmpty
}

func (x *Buff) GetControlEff() ControlEff {
	if x != nil {
		return x.ControlEff
	}
	return ControlEff_ControlEffEmpty
}

func (x *Buff) GetEffTiming() EffTiming {
	if x != nil {
		return x.EffTiming
	}
	return EffTiming_EffTimingEmpty
}

func (x *Buff) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *Buff) GetEffValues() []string {
	if x != nil {
		return x.EffValues
	}
	return nil
}

func (x *Buff) GetEffUidList() []int32 {
	if x != nil {
		return x.EffUidList
	}
	return nil
}

type ScPlayerGameEndFor1VN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阵亡的玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 各个玩家的排名 | @inject_tag: msgpack:"ranks" json:"ranks"
	Ranks []*Player `protobuf:"bytes,2,rep,name=ranks,proto3" json:"ranks" msgpack:"ranks"`
}

func (x *ScPlayerGameEndFor1VN) Reset() {
	*x = ScPlayerGameEndFor1VN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScPlayerGameEndFor1VN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScPlayerGameEndFor1VN) ProtoMessage() {}

func (x *ScPlayerGameEndFor1VN) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScPlayerGameEndFor1VN.ProtoReflect.Descriptor instead.
func (*ScPlayerGameEndFor1VN) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{48}
}

func (x *ScPlayerGameEndFor1VN) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ScPlayerGameEndFor1VN) GetRanks() []*Player {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type ScGetServerTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当前服务器的时间，毫秒时间戳 | @inject_tag: msgpack:"timestamp" json:"timestamp"
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp" msgpack:"timestamp"`
}

func (x *ScGetServerTime) Reset() {
	*x = ScGetServerTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGetServerTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGetServerTime) ProtoMessage() {}

func (x *ScGetServerTime) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGetServerTime.ProtoReflect.Descriptor instead.
func (*ScGetServerTime) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{49}
}

func (x *ScGetServerTime) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 收到其他玩家的技能攻击
type ScBeAtkBySkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 技能施放者 | @inject_tag: msgpack:"fromUid" json:"fromUid"
	FromUid int32 `protobuf:"varint,1,opt,name=fromUid,proto3" json:"fromUid" msgpack:"fromUid"`
	// 技能 id | @inject_tag: msgpack:"skillId" json:"skillId"
	SkillId int32 `protobuf:"varint,2,opt,name=skillId,proto3" json:"skillId" msgpack:"skillId"`
}

func (x *ScBeAtkBySkill) Reset() {
	*x = ScBeAtkBySkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScBeAtkBySkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScBeAtkBySkill) ProtoMessage() {}

func (x *ScBeAtkBySkill) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScBeAtkBySkill.ProtoReflect.Descriptor instead.
func (*ScBeAtkBySkill) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{50}
}

func (x *ScBeAtkBySkill) GetFromUid() int32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *ScBeAtkBySkill) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

// 施放技能的前置信息，可用于在按钮上展示施放目标的头像
type ScReleaseSkillBeforeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 推荐的目标 uid | @inject_tag: msgpack:"recTargetUid" json:"recTargetUid"
	RecTargetUid int32 `protobuf:"varint,1,opt,name=recTargetUid,proto3" json:"recTargetUid" msgpack:"recTargetUid"`
	// 推荐的目标角色 id | @inject_tag: msgpack:"recTargetRoleId" json:"recTargetRoleId"
	RecTargetRoleId int32 `protobuf:"varint,2,opt,name=recTargetRoleId,proto3" json:"recTargetRoleId" msgpack:"recTargetRoleId"`
}

func (x *ScReleaseSkillBeforeInfo) Reset() {
	*x = ScReleaseSkillBeforeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScReleaseSkillBeforeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScReleaseSkillBeforeInfo) ProtoMessage() {}

func (x *ScReleaseSkillBeforeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScReleaseSkillBeforeInfo.ProtoReflect.Descriptor instead.
func (*ScReleaseSkillBeforeInfo) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{51}
}

func (x *ScReleaseSkillBeforeInfo) GetRecTargetUid() int32 {
	if x != nil {
		return x.RecTargetUid
	}
	return 0
}

func (x *ScReleaseSkillBeforeInfo) GetRecTargetRoleId() int32 {
	if x != nil {
		return x.RecTargetRoleId
	}
	return 0
}

// 角色属性更新广播
type BrRoleAttrUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阵亡的玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 角色更新的属性类型 | @inject_tag: msgpack:"attrType" json:"attrType"
	AttrType BuffRoleAttr `protobuf:"varint,2,opt,name=attrType,proto3,enum=rainbow.v1.BuffRoleAttr" json:"attrType" msgpack:"attrType"`
	// 角色更新的属性类型 | @inject_tag: msgpack:"attrType" json:"attrType"
	Value int32 `protobuf:"varint,3,opt,name=value,proto3" json:"attrType" msgpack:"attrType"`
}

func (x *BrRoleAttrUpdate) Reset() {
	*x = BrRoleAttrUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrRoleAttrUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrRoleAttrUpdate) ProtoMessage() {}

func (x *BrRoleAttrUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrRoleAttrUpdate.ProtoReflect.Descriptor instead.
func (*BrRoleAttrUpdate) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{52}
}

func (x *BrRoleAttrUpdate) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrRoleAttrUpdate) GetAttrType() BuffRoleAttr {
	if x != nil {
		return x.AttrType
	}
	return BuffRoleAttr_BuffRoleAttrEmpty
}

func (x *BrRoleAttrUpdate) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_rainbow_proto protoreflect.FileDescriptor

var file_rainbow_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x22, 0x4e, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1b, 0x0a, 0x07, 0x45,
	0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x21, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc1, 0x03, 0x0a, 0x0b,
	0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x62, 0x6f, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x4e,
	0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x4e,
	0x66, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x07, 0x70, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x69, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x61, 0x69, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x42,
	0x6f, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x62, 0x6f, 0x74, 0x4e, 0x66, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x69, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xce, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04,
	0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x69,
	0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65,
	0x65, 0x64, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4e, 0x65,
	0x77, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x4e, 0x65, 0x77, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65,
	0x48, 0x61, 0x73, 0x4b, 0x65, 0x70, 0x74, 0x53, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x70, 0x74, 0x53, 0x65, 0x63,
	0x22, 0x6a, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x81, 0x01, 0x0a,
	0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61,
	0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x72,
	0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xfe, 0x01, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x74, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x74, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x66, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x66, 0x74, 0x49,
	0x64, 0x22, 0x64, 0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61,
	0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x69, 0x6e,
	0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x22, 0x2a, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x79, 0x22, 0x67, 0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x0e,
	0x43, 0x73, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x61, 0x64, 0x56, 0x31, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x78,
	0x22, 0x69, 0x0a, 0x0b, 0x42, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x64, 0x69, 0x65,
	0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x69, 0x6e,
	0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x69, 0x65, 0x50, 0x6f, 0x73, 0x22, 0xe8, 0x02, 0x0a, 0x0e,
	0x42, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x31, 0x56, 0x31, 0x12, 0x30,
	0x0a, 0x09, 0x77, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x3c,
	0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x67, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0d,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xc9, 0x04, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x6f, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x6f, 0x73, 0x73, 0x4e, 0x75,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x48, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x61, 0x78, 0x48, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x74,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x69,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61,
	0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x74, 0x4e, 0x75,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x65, 0x48, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x62, 0x65, 0x48, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x75, 0x72, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x68, 0x75, 0x72, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6e, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x63, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x09, 0x72, 0x65, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6d, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x6d, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65,
	0x63, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x63, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x63, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6d, 0x67, 0x22, 0x3e, 0x0a, 0x0c, 0x53, 0x63, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x6f,
	0x61, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x40, 0x0a, 0x0e, 0x53, 0x63, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x6f,
	0x61, 0x64, 0x56, 0x31, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x61, 0x64, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x0e, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x6f, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x22, 0x25, 0x0a, 0x07, 0x4f, 0x6e, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd1, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x42,
	0x6f, 0x73, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x6f, 0x6c, 0x65, 0x48, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6c,
	0x65, 0x48, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x3e, 0x0a,
	0x06, 0x63, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x42, 0x6f, 0x73,
	0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x72, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x0d,
	0x53, 0x63, 0x50, 0x69, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x68, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x74, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x74, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x0a, 0x43, 0x73, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x4f, 0x70, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12,
	0x2f, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x87, 0x01, 0x0a, 0x0a, 0x42, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x77, 0x61, 0x72, 0x64, 0x56,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x77, 0x61, 0x72, 0x64, 0x56,
	0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x22, 0x56, 0x0a, 0x10, 0x42, 0x72,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x50,
	0x6f, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x42, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x69,
	0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x70, 0x74, 0x53, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x4b,
	0x65, 0x70, 0x74, 0x53, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x0c, 0x53, 0x63, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x22, 0x3c, 0x0a, 0x10, 0x42, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x76, 0x6f,
	0x74, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x59,
	0x22, 0x3d, 0x0a, 0x13, 0x42, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x57,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x22,
	0x79, 0x0a, 0x0b, 0x42, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a,
	0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x2a, 0x0a, 0x0a, 0x43, 0x73,
	0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x53, 0x63, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x06, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x22,
	0xb5, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x63, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x66, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x69,
	0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x65, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x66, 0x66, 0x55, 0x69, 0x64, 0x41, 0x72, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x66, 0x66, 0x55, 0x69, 0x64, 0x41, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x46, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x4e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x4e,
	0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x55, 0x69, 0x64, 0x41, 0x72, 0x72, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x65, 0x66, 0x66, 0x55, 0x69, 0x64, 0x41, 0x72, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a,
	0x0e, 0x53, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x65,
	0x70, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x65, 0x70,
	0x53, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x08, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x6e,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x12, 0x42, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x66, 0x66, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x66, 0x66, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x69, 0x6e,
	0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x65, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x55,
	0x69, 0x64, 0x41, 0x72, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x65, 0x66, 0x66,
	0x55, 0x69, 0x64, 0x41, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x66, 0x66, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x44, 0x65, 0x78, 0x41,
	0x72, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x44, 0x65, 0x78, 0x41, 0x72, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x42, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x66, 0x66, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x66, 0x66, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x65,
	0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x17, 0x42, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12,
	0x2a, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x0d, 0x53,
	0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x0f, 0x53, 0x63, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x44, 0x65, 0x42, 0x75, 0x66, 0x66, 0x48, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x22, 0x58, 0x0a,
	0x10, 0x53, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x42, 0x75, 0x66, 0x66, 0x41, 0x74,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b,
	0x65, 0x65, 0x70, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65,
	0x65, 0x70, 0x53, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x56, 0x0a, 0x0e, 0x53, 0x63, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x41, 0x74, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x63, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22,
	0x42, 0x0a, 0x0c, 0x53, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x65,
	0x70, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x65, 0x70,
	0x53, 0x65, 0x63, 0x22, 0x61, 0x0a, 0x0d, 0x53, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x11, 0x53, 0x63, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x48, 0x75, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x22, 0x6a, 0x0a, 0x14, 0x53, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x69,
	0x73, 0x74, 0x48, 0x75, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x49, 0x64, 0x22, 0xf6, 0x03,
	0x0a, 0x04, 0x42, 0x75, 0x66, 0x66, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x45, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x65, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x66, 0x66,
	0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x65, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x69,
	0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x66, 0x66, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x66, 0x66, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x66, 0x66, 0x12, 0x33, 0x0a, 0x09, 0x65, 0x66, 0x66,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x72,
	0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x65, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x66, 0x66,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x55, 0x69, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x55,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x15, 0x53, 0x63, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x31, 0x76, 0x4e, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x22, 0x2f, 0x0a, 0x0f, 0x53,
	0x63, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x44, 0x0a, 0x0e,
	0x53, 0x63, 0x42, 0x65, 0x41, 0x74, 0x6b, 0x42, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x22, 0x68, 0x0a, 0x18, 0x53, 0x63, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x10,
	0x42, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x2b,
	0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x76,
	0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x76, 0x70, 0x31, 0x76, 0x31, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x76, 0x70, 0x31, 0x76, 0x6e, 0x10, 0x02, 0x2a, 0x3a, 0x0a, 0x0a, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x30, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x2a, 0x48, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x4f, 0x54, 0x5f, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x69,
	0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x69,
	0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x65, 0x10,
	0x03, 0x2a, 0x48, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x10, 0x04, 0x2a, 0x3b, 0x0a, 0x09, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x48, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x74, 0x6b, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x03, 0x2a, 0x81, 0x02, 0x0a, 0x0a, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x30, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x31, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x32, 0x52, 0x69,
	0x67, 0x69, 0x64, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x33, 0x46, 0x6f, 0x67, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x34, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x48, 0x75, 0x72, 0x74, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x35, 0x41, 0x74, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x36, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x37, 0x44, 0x65, 0x42, 0x75, 0x66, 0x66, 0x48, 0x70, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x38, 0x44, 0x65, 0x42, 0x75, 0x66, 0x66, 0x41, 0x74, 0x6b, 0x10,
	0x08, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x39, 0x53, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x31, 0x30,
	0x42, 0x75, 0x66, 0x66, 0x41, 0x74, 0x6b, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x31, 0x31, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x0b, 0x2a, 0x79, 0x0a, 0x09,
	0x45, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x66, 0x66,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x41, 0x74, 0x6b, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x74, 0x6b, 0x57, 0x68, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x74, 0x6b,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x65, 0x41, 0x74, 0x6b,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x65, 0x41, 0x74,
	0x6b, 0x57, 0x68, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x41, 0x74, 0x6b,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x10, 0x06, 0x2a, 0x46, 0x0a, 0x0b, 0x42, 0x75, 0x66, 0x66, 0x45,
	0x66, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x75, 0x66, 0x66, 0x45, 0x66,
	0x66, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x64, 0x2a,
	0x46, 0x0a, 0x0c, 0x42, 0x75, 0x66, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x15, 0x0a, 0x11, 0x42, 0x75, 0x66, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x48, 0x70, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x41, 0x74, 0x6b, 0x10, 0x02, 0x2a, 0x9f, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x45, 0x66, 0x66, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x45, 0x66, 0x66, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x45, 0x66, 0x66, 0x5f, 0x52, 0x69, 0x67, 0x69, 0x64, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x45, 0x66, 0x66, 0x5f, 0x53, 0x74, 0x75, 0x6e, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x45, 0x66, 0x66, 0x5f, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x45, 0x66, 0x66, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x6e, 0x63, 0x69, 0x62,
	0x6c, 0x65, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x45, 0x66, 0x66, 0x5f, 0x49, 0x6e, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x45, 0x66, 0x66,
	0x5f, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x45, 0x66,
	0x66, 0x5f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x07, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x68, 0x61, 0x6e, 0x79, 0x75, 0x6a,
	0x69, 0x65, 0x2f, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77,
	0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rainbow_proto_rawDescOnce sync.Once
	file_rainbow_proto_rawDescData = file_rainbow_proto_rawDesc
)

func file_rainbow_proto_rawDescGZIP() []byte {
	file_rainbow_proto_rawDescOnce.Do(func() {
		file_rainbow_proto_rawDescData = protoimpl.X.CompressGZIP(file_rainbow_proto_rawDescData)
	})
	return file_rainbow_proto_rawDescData
}

var file_rainbow_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_rainbow_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_rainbow_proto_goTypes = []interface{}{
	(GameType)(0),                    // 0: rainbow.v1.GameType
	(SkillState)(0),                  // 1: rainbow.v1.SkillState
	(GameOverType)(0),                // 2: rainbow.v1.GameOverType
	(OperateType)(0),                 // 3: rainbow.v1.OperateType
	(AwardType)(0),                   // 4: rainbow.v1.AwardType
	(EffectType)(0),                  // 5: rainbow.v1.EffectType
	(EffTiming)(0),                   // 6: rainbow.v1.EffTiming
	(BuffEffMode)(0),                 // 7: rainbow.v1.BuffEffMode
	(BuffRoleAttr)(0),                // 8: rainbow.v1.BuffRoleAttr
	(ControlEff)(0),                  // 9: rainbow.v1.ControlEff
	(*Message)(nil),                  // 10: rainbow.v1.Message
	(*ErrInfo)(nil),                  // 11: rainbow.v1.ErrInfo
	(*NormalInfo)(nil),               // 12: rainbow.v1.NormalInfo
	(*UserLogin)(nil),                // 13: rainbow.v1.UserLogin
	(*JoinGameReq)(nil),              // 14: rainbow.v1.JoinGameReq
	(*ScPlayerJoin)(nil),             // 15: rainbow.v1.ScPlayerJoin
	(*RoomDetail)(nil),               // 16: rainbow.v1.RoomDetail
	(*Player)(nil),                   // 17: rainbow.v1.Player
	(*RoleInfo)(nil),                 // 18: rainbow.v1.RoleInfo
	(*RoleState)(nil),                // 19: rainbow.v1.RoleState
	(*RolePosition)(nil),             // 20: rainbow.v1.RolePosition
	(*RoleSkill)(nil),                // 21: rainbow.v1.RoleSkill
	(*CsGetNewRoadV1)(nil),           // 22: rainbow.v1.CsGetNewRoadV1
	(*BrPlayerDie)(nil),              // 23: rainbow.v1.BrPlayerDie
	(*BrGameEndOf1V1)(nil),           // 24: rainbow.v1.BrGameEndOf1V1
	(*PlayerSettleInfo)(nil),         // 25: rainbow.v1.PlayerSettleInfo
	(*ScGetNewRoad)(nil),             // 26: rainbow.v1.ScGetNewRoad
	(*ScGetNewRoadV1)(nil),           // 27: rainbow.v1.ScGetNewRoadV1
	(*OnePassageRoad)(nil),           // 28: rainbow.v1.OnePassageRoad
	(*OneCell)(nil),                  // 29: rainbow.v1.OneCell
	(*ScBossFightRes)(nil),           // 30: rainbow.v1.ScBossFightRes
	(*ScPickItemReq)(nil),            // 31: rainbow.v1.ScPickItemReq
	(*CsJudgeOpt)(nil),               // 32: rainbow.v1.CsJudgeOpt
	(*BrPickItem)(nil),               // 33: rainbow.v1.BrPickItem
	(*BrPlayerRollback)(nil),         // 34: rainbow.v1.BrPlayerRollback
	(*BrRolePositions)(nil),          // 35: rainbow.v1.BrRolePositions
	(*ScGetRolePos)(nil),             // 36: rainbow.v1.ScGetRolePos
	(*BrRoleReachPivot)(nil),         // 37: rainbow.v1.BrRoleReachPivot
	(*BrRolePivotFightEnd)(nil),      // 38: rainbow.v1.BrRolePivotFightEnd
	(*BrGameStart)(nil),              // 39: rainbow.v1.BrGameStart
	(*CsUseSkill)(nil),               // 40: rainbow.v1.CsUseSkill
	(*ScSkillDisplacement)(nil),      // 41: rainbow.v1.ScSkillDisplacement
	(*ScSkillEffectInfo)(nil),        // 42: rainbow.v1.ScSkillEffectInfo
	(*ScSkillFog)(nil),               // 43: rainbow.v1.ScSkillFog
	(*ScSkillAttract)(nil),           // 44: rainbow.v1.ScSkillAttract
	(*OneStone)(nil),                 // 45: rainbow.v1.OneStone
	(*BrRoleSkillRelease)(nil),       // 46: rainbow.v1.BrRoleSkillRelease
	(*BrRoleSkillReleaseEnd)(nil),    // 47: rainbow.v1.BrRoleSkillReleaseEnd
	(*BrRoleSkillEndForShadow)(nil),  // 48: rainbow.v1.BrRoleSkillEndForShadow
	(*ScSkillShadow)(nil),            // 49: rainbow.v1.ScSkillShadow
	(*ScSkillDeBuffHp)(nil),          // 50: rainbow.v1.ScSkillDeBuffHp
	(*ScSkillDeBuffAtk)(nil),         // 51: rainbow.v1.ScSkillDeBuffAtk
	(*ScSkillBuffAtk)(nil),           // 52: rainbow.v1.ScSkillBuffAtk
	(*ScSkillFloat)(nil),             // 53: rainbow.v1.ScSkillFloat
	(*ScSkillSprint)(nil),            // 54: rainbow.v1.ScSkillSprint
	(*ScSkillResistHurt)(nil),        // 55: rainbow.v1.ScSkillResistHurt
	(*ScSkillResistHurtEnd)(nil),     // 56: rainbow.v1.ScSkillResistHurtEnd
	(*Buff)(nil),                     // 57: rainbow.v1.Buff
	(*ScPlayerGameEndFor1VN)(nil),    // 58: rainbow.v1.ScPlayerGameEndFor1vN
	(*ScGetServerTime)(nil),          // 59: rainbow.v1.ScGetServerTime
	(*ScBeAtkBySkill)(nil),           // 60: rainbow.v1.ScBeAtkBySkill
	(*ScReleaseSkillBeforeInfo)(nil), // 61: rainbow.v1.ScReleaseSkillBeforeInfo
	(*BrRoleAttrUpdate)(nil),         // 62: rainbow.v1.BrRoleAttrUpdate
	nil,                              // 63: rainbow.v1.ScBossFightRes.CratesEntry
}
var file_rainbow_proto_depIdxs = []int32{
	0,  // 0: rainbow.v1.JoinGameReq.roomType:type_name -> rainbow.v1.GameType
	16, // 1: rainbow.v1.ScPlayerJoin.room:type_name -> rainbow.v1.RoomDetail
	17, // 2: rainbow.v1.RoomDetail.players:type_name -> rainbow.v1.Player
	18, // 3: rainbow.v1.Player.roleInfo:type_name -> rainbow.v1.RoleInfo
	19, // 4: rainbow.v1.Player.roleState:type_name -> rainbow.v1.RoleState
	20, // 5: rainbow.v1.RoleState.pos:type_name -> rainbow.v1.RolePosition
	21, // 6: rainbow.v1.RoleState.skill:type_name -> rainbow.v1.RoleSkill
	1,  // 7: rainbow.v1.RoleSkill.state:type_name -> rainbow.v1.SkillState
	20, // 8: rainbow.v1.BrPlayerDie.diePos:type_name -> rainbow.v1.RolePosition
	17, // 9: rainbow.v1.BrGameEndOf1V1.winPlayer:type_name -> rainbow.v1.Player
	17, // 10: rainbow.v1.BrGameEndOf1V1.losePlayer:type_name -> rainbow.v1.Player
	25, // 11: rainbow.v1.BrGameEndOf1V1.playerSettles:type_name -> rainbow.v1.PlayerSettleInfo
	2,  // 12: rainbow.v1.BrGameEndOf1V1.gameOverType:type_name -> rainbow.v1.GameOverType
	17, // 13: rainbow.v1.BrGameEndOf1V1.rankedPlayers:type_name -> rainbow.v1.Player
	28, // 14: rainbow.v1.ScGetNewRoad.data:type_name -> rainbow.v1.OnePassageRoad
	28, // 15: rainbow.v1.ScGetNewRoadV1.data:type_name -> rainbow.v1.OnePassageRoad
	29, // 16: rainbow.v1.OnePassageRoad.cells:type_name -> rainbow.v1.OneCell
	63, // 17: rainbow.v1.ScBossFightRes.crates:type_name -> rainbow.v1.ScBossFightRes.CratesEntry
	3,  // 18: rainbow.v1.CsJudgeOpt.opType:type_name -> rainbow.v1.OperateType
	4,  // 19: rainbow.v1.BrPickItem.awardType:type_name -> rainbow.v1.AwardType
	20, // 20: rainbow.v1.BrPlayerRollback.newPos:type_name -> rainbow.v1.RolePosition
	16, // 21: rainbow.v1.BrRolePositions.roomDetail:type_name -> rainbow.v1.RoomDetail
	20, // 22: rainbow.v1.ScGetRolePos.pos:type_name -> rainbow.v1.RolePosition
	16, // 23: rainbow.v1.BrGameStart.roomDetail:type_name -> rainbow.v1.RoomDetail
	20, // 24: rainbow.v1.ScSkillDisplacement.newPos:type_name -> rainbow.v1.RolePosition
	5,  // 25: rainbow.v1.ScSkillEffectInfo.effType:type_name -> rainbow.v1.EffectType
	45, // 26: rainbow.v1.ScSkillAttract.stones:type_name -> rainbow.v1.OneStone
	5,  // 27: rainbow.v1.BrRoleSkillRelease.effType:type_name -> rainbow.v1.EffectType
	45, // 28: rainbow.v1.BrRoleSkillRelease.stones:type_name -> rainbow.v1.OneStone
	5,  // 29: rainbow.v1.BrRoleSkillReleaseEnd.effType:type_name -> rainbow.v1.EffectType
	17, // 30: rainbow.v1.BrRoleSkillEndForShadow.player:type_name -> rainbow.v1.Player
	7,  // 31: rainbow.v1.Buff.effMode:type_name -> rainbow.v1.BuffEffMode
	8,  // 32: rainbow.v1.Buff.effRoleAttr:type_name -> rainbow.v1.BuffRoleAttr
	9,  // 33: rainbow.v1.Buff.controlEff:type_name -> rainbow.v1.ControlEff
	6,  // 34: rainbow.v1.Buff.effTiming:type_name -> rainbow.v1.EffTiming
	17, // 35: rainbow.v1.ScPlayerGameEndFor1vN.ranks:type_name -> rainbow.v1.Player
	8,  // 36: rainbow.v1.BrRoleAttrUpdate.attrType:type_name -> rainbow.v1.BuffRoleAttr
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_rainbow_proto_init() }
func file_rainbow_proto_init() {
	if File_rainbow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rainbow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScPlayerJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsGetNewRoadV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrPlayerDie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrGameEndOf1V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGetNewRoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGetNewRoadV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnePassageRoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScBossFightRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScPickItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsJudgeOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrPickItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrPlayerRollback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrRolePositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGetRolePos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrRoleReachPivot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrRolePivotFightEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrGameStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsUseSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSkillDisplacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSkillEffectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSkillFog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSkillAttract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneStone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrRoleSkillRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrRoleSkillReleaseEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrRoleSkillEndForShadow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSkillShadow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSkillDeBuffHp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSkillDeBuffAtk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSkillBuffAtk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSkillFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSkillSprint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSkillResistHurt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSkillResistHurtEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScPlayerGameEndFor1VN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGetServerTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScBeAtkBySkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScReleaseSkillBeforeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrRoleAttrUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rainbow_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_rainbow_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rainbow_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rainbow_proto_goTypes,
		DependencyIndexes: file_rainbow_proto_depIdxs,
		EnumInfos:         file_rainbow_proto_enumTypes,
		MessageInfos:      file_rainbow_proto_msgTypes,
	}.Build()
	File_rainbow_proto = out.File
	file_rainbow_proto_rawDesc = nil
	file_rainbow_proto_goTypes = nil
	file_rainbow_proto_depIdxs = nil
}
