// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: rainbow.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameType int32

const (
	// pve
	GameType_Pve GameType = 0
	// pvp 1v1
	GameType_Pvp1v1 GameType = 1
	// 多人同屏
	GameType_Pvp1vn GameType = 2
)

// Enum value maps for GameType.
var (
	GameType_name = map[int32]string{
		0: "Pve",
		1: "Pvp1v1",
		2: "Pvp1vn",
	}
	GameType_value = map[string]int32{
		"Pve":    0,
		"Pvp1v1": 1,
		"Pvp1vn": 2,
	}
)

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}

func (x GameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[0].Descriptor()
}

func (GameType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[0]
}

func (x GameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameType.Descriptor instead.
func (GameType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{0}
}

type SkillState int32

const (
	SkillState_SkillStateEmpty0 SkillState = 0
	// 冷却、充能中
	SkillState_Cooling SkillState = 1
	// 就绪
	SkillState_Ready SkillState = 2
)

// Enum value maps for SkillState.
var (
	SkillState_name = map[int32]string{
		0: "SkillStateEmpty0",
		1: "Cooling",
		2: "Ready",
	}
	SkillState_value = map[string]int32{
		"SkillStateEmpty0": 0,
		"Cooling":          1,
		"Ready":            2,
	}
)

func (x SkillState) Enum() *SkillState {
	p := new(SkillState)
	*p = x
	return p
}

func (x SkillState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkillState) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[1].Descriptor()
}

func (SkillState) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[1]
}

func (x SkillState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkillState.Descriptor instead.
func (SkillState) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{1}
}

type OperateType int32

const (
	OperateType_OptEmpty OperateType = 0
	// 左滑
	OperateType_Left OperateType = 1
	// 右滑
	OperateType_Right OperateType = 2
	// 连接
	OperateType_Concat OperateType = 3
	// 弹起
	OperateType_Bounce OperateType = 4
)

// Enum value maps for OperateType.
var (
	OperateType_name = map[int32]string{
		0: "OptEmpty",
		1: "Left",
		2: "Right",
		3: "Concat",
		4: "Bounce",
	}
	OperateType_value = map[string]int32{
		"OptEmpty": 0,
		"Left":     1,
		"Right":    2,
		"Concat":   3,
		"Bounce":   4,
	}
)

func (x OperateType) Enum() *OperateType {
	p := new(OperateType)
	*p = x
	return p
}

func (x OperateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperateType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[2].Descriptor()
}

func (OperateType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[2]
}

func (x OperateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperateType.Descriptor instead.
func (OperateType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{2}
}

type AwardType int32

const (
	AwardType_AwardTypeEmpty AwardType = 0
	// 生命值
	AwardType_Hp AwardType = 1
	// 攻击力
	AwardType_Atk AwardType = 2
	// 原初之力
	AwardType_Power AwardType = 3
)

// Enum value maps for AwardType.
var (
	AwardType_name = map[int32]string{
		0: "AwardTypeEmpty",
		1: "Hp",
		2: "Atk",
		3: "Power",
	}
	AwardType_value = map[string]int32{
		"AwardTypeEmpty": 0,
		"Hp":             1,
		"Atk":            2,
		"Power":          3,
	}
)

func (x AwardType) Enum() *AwardType {
	p := new(AwardType)
	*p = x
	return p
}

func (x AwardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwardType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[3].Descriptor()
}

func (AwardType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[3]
}

func (x AwardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwardType.Descriptor instead.
func (AwardType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{3}
}

// 客户端请求服务端结构
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息 id | @inject_tag: msgpack:"message_id" json:"message_id"
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id" msgpack:"message_id"`
	// 用户 id | @inject_tag: msgpack:"uid" json:"uid"
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 协议携带的数据 | @inject_tag: msgpack:"data" json:"data"
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data" msgpack:"data"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Message) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Message) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ErrInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 备注信息 | @inject_tag: msgpack:"msg" json:"msg"
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg" msgpack:"msg"`
}

func (x *ErrInfo) Reset() {
	*x = ErrInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrInfo) ProtoMessage() {}

func (x *ErrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrInfo.ProtoReflect.Descriptor instead.
func (*ErrInfo) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{1}
}

func (x *ErrInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type NormalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 备注信息 | @inject_tag: msgpack:"msg" json:"msg"
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg" msgpack:"msg"`
}

func (x *NormalInfo) Reset() {
	*x = NormalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalInfo) ProtoMessage() {}

func (x *NormalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalInfo.ProtoReflect.Descriptor instead.
func (*NormalInfo) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{2}
}

func (x *NormalInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 客户端建立连接后，请求一次登录，参数是用户的 token
type UserLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户的 token，一般从平台获取 | @inject_tag: msgpack:"token" json:"token"
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token" msgpack:"token"`
}

func (x *UserLogin) Reset() {
	*x = UserLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogin) ProtoMessage() {}

func (x *UserLogin) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogin.ProtoReflect.Descriptor instead.
func (*UserLogin) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{3}
}

func (x *UserLogin) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type JoinGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 平台提供的房间 id，结算时透传。因为是长整，恐前端会溢出，所以用字符串类型。ext 前缀表示 external | @inject_tag: msgpack:"extRoomId" json:"extRoomId"
	ExtRoomId *string `protobuf:"bytes,1,opt,name=extRoomId,proto3,oneof" json:"extRoomId" msgpack:"extRoomId"`
	// 平台的对局 id，全局唯一 [必填] | @inject_tag: msgpack:"extMatchId" json:"extMatchId"
	ExtMatchId string `protobuf:"bytes,2,opt,name=extMatchId,proto3" json:"extMatchId" msgpack:"extMatchId"`
	// 是否与机器人对战 | @inject_tag: msgpack:"needBot" json:"needBot"
	NeedBot *bool `protobuf:"varint,3,opt,name=needBot,proto3,oneof" json:"needBot" msgpack:"needBot"`
	// 机器人的 uid | @inject_tag: msgpack:"botId" json:"botId"
	BotId *int32 `protobuf:"varint,4,opt,name=botId,proto3,oneof" json:"botId" msgpack:"botId"`
	// 机器人的 nft | @inject_tag: msgpack:"botNft" json:"botNft"
	BotNft *int32 `protobuf:"varint,5,opt,name=botNft,proto3,oneof" json:"botNft" msgpack:"botNft"`
	// 门票 | @inject_tag: msgpack:"ticket" json:"ticket"
	Ticket *float32 `protobuf:"fixed32,6,opt,name=ticket,proto3,oneof" json:"ticket" msgpack:"ticket"`
	// 对战类型，平台参数，区分 1v1，淘汰赛等 | @inject_tag: msgpack:"pvpType" json:"pvpType"
	PvpType *int32 `protobuf:"varint,7,opt,name=pvpType,proto3,oneof" json:"pvpType" msgpack:"pvpType"`
	// 游戏类型 [必填] | @inject_tag: msgpack:"roomType" json:"roomType"
	RoomType GameType `protobuf:"varint,8,opt,name=roomType,proto3,enum=throw.v1.GameType" json:"roomType" msgpack:"roomType"`
	// 机器人的 ai 策略类型 | @inject_tag: msgpack:"aiPolicyType" json:"aiPolicyType"
	AiPolicyType *int32 `protobuf:"varint,9,opt,name=aiPolicyType,proto3,oneof" json:"aiPolicyType" msgpack:"aiPolicyType"`
	// 关卡/难度 [必填] | @inject_tag: msgpack:"level" json:"level"
	Level int32 `protobuf:"varint,10,opt,name=level,proto3" json:"level" msgpack:"level"`
}

func (x *JoinGameReq) Reset() {
	*x = JoinGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGameReq) ProtoMessage() {}

func (x *JoinGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGameReq.ProtoReflect.Descriptor instead.
func (*JoinGameReq) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{4}
}

func (x *JoinGameReq) GetExtRoomId() string {
	if x != nil && x.ExtRoomId != nil {
		return *x.ExtRoomId
	}
	return ""
}

func (x *JoinGameReq) GetExtMatchId() string {
	if x != nil {
		return x.ExtMatchId
	}
	return ""
}

func (x *JoinGameReq) GetNeedBot() bool {
	if x != nil && x.NeedBot != nil {
		return *x.NeedBot
	}
	return false
}

func (x *JoinGameReq) GetBotId() int32 {
	if x != nil && x.BotId != nil {
		return *x.BotId
	}
	return 0
}

func (x *JoinGameReq) GetBotNft() int32 {
	if x != nil && x.BotNft != nil {
		return *x.BotNft
	}
	return 0
}

func (x *JoinGameReq) GetTicket() float32 {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return 0
}

func (x *JoinGameReq) GetPvpType() int32 {
	if x != nil && x.PvpType != nil {
		return *x.PvpType
	}
	return 0
}

func (x *JoinGameReq) GetRoomType() GameType {
	if x != nil {
		return x.RoomType
	}
	return GameType_Pve
}

func (x *JoinGameReq) GetAiPolicyType() int32 {
	if x != nil && x.AiPolicyType != nil {
		return *x.AiPolicyType
	}
	return 0
}

func (x *JoinGameReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// 玩家加入房间
type ScPlayerJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家用户 id | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 游戏的关卡 id | @inject_tag: msgpack:"levelId" json:"levelId"
	LevelId int32 `protobuf:"varint,2,opt,name=levelId,proto3" json:"levelId" msgpack:"levelId"`
	// 房间内信息 | @inject_tag: msgpack:"room" json:"room"
	Room *RoomDetail `protobuf:"bytes,3,opt,name=room,proto3" json:"room" msgpack:"room"`
	// 是否需要镜像,没用到可以先忽略 | @inject_tag: msgpack:"needMirror" json:"needMirror"
	NeedMirror int32 `protobuf:"varint,4,opt,name=needMirror,proto3" json:"needMirror" msgpack:"needMirror"`
}

func (x *ScPlayerJoin) Reset() {
	*x = ScPlayerJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScPlayerJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScPlayerJoin) ProtoMessage() {}

func (x *ScPlayerJoin) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScPlayerJoin.ProtoReflect.Descriptor instead.
func (*ScPlayerJoin) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{5}
}

func (x *ScPlayerJoin) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ScPlayerJoin) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *ScPlayerJoin) GetRoom() *RoomDetail {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *ScPlayerJoin) GetNeedMirror() int32 {
	if x != nil {
		return x.NeedMirror
	}
	return 0
}

type RoomDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// room id | @inject_tag: msgpack:"id" json:"id"
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" msgpack:"id"`
	// 当前，房间内所有玩家信息 | @inject_tag: msgpack:"players" json:"players"
	Players []*Player `protobuf:"bytes,2,rep,name=players,proto3" json:"players" msgpack:"players"`
}

func (x *RoomDetail) Reset() {
	*x = RoomDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomDetail) ProtoMessage() {}

func (x *RoomDetail) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomDetail.ProtoReflect.Descriptor instead.
func (*RoomDetail) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{6}
}

func (x *RoomDetail) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoomDetail) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家用户 id | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 角色的详细信息 | @inject_tag: msgpack:"roleInfo" json:"roleInfo"
	RoleInfo *RoleInfo `protobuf:"bytes,2,opt,name=roleInfo,proto3" json:"roleInfo" msgpack:"roleInfo"`
	// 角色的详细信息 | @inject_tag: msgpack:"roleState" json:"roleState"
	RoleState *RoleState `protobuf:"bytes,3,opt,name=roleState,proto3" json:"roleState" msgpack:"roleState"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{7}
}

func (x *Player) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Player) GetRoleInfo() *RoleInfo {
	if x != nil {
		return x.RoleInfo
	}
	return nil
}

func (x *Player) GetRoleState() *RoleState {
	if x != nil {
		return x.RoleState
	}
	return nil
}

type RoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 角色 id | @inject_tag: msgpack:"id" json:"id"
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" msgpack:"id"`
	// @inject_tag: msgpack:"nickname" json:"nickname"
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname" msgpack:"nickname"`
	// 角色相关资源 | @inject_tag: msgpack:"image" json:"image"
	Image int32 `protobuf:"varint,3,opt,name=image,proto3" json:"image" msgpack:"image"`
	// 品质 | @inject_tag: msgpack:"quality" json:"quality"
	Quality int32 `protobuf:"varint,4,opt,name=quality,proto3" json:"quality" msgpack:"quality"`
	// 生命值 | @inject_tag: msgpack:"hp" json:"hp"
	Hp int32 `protobuf:"varint,5,opt,name=hp,proto3" json:"hp" msgpack:"hp"`
	// 防御力 | @inject_tag: msgpack:"def" json:"def"
	Def int32 `protobuf:"varint,6,opt,name=def,proto3" json:"def" msgpack:"def"`
	// 攻击力 | @inject_tag: msgpack:"atk" json:"atk"
	Atk int32 `protobuf:"varint,7,opt,name=atk,proto3" json:"atk" msgpack:"atk"`
	// 技能 id | @inject_tag: msgpack:"skillId" json:"skillId"
	SkillId int32 `protobuf:"varint,8,opt,name=skillId,proto3" json:"skillId" msgpack:"skillId"`
	// 是否是怪物，true 怪物，false 角色 | @inject_tag: msgpack:"isMonster" json:"isMonster"
	IsMonster bool `protobuf:"varint,9,opt,name=isMonster,proto3" json:"isMonster" msgpack:"isMonster"`
	// 角色对应的 nftId | @inject_tag: msgpack:"nftId" json:"nftId"
	NftId int32 `protobuf:"varint,10,opt,name=nftId,proto3" json:"nftId" msgpack:"nftId"`
}

func (x *RoleInfo) Reset() {
	*x = RoleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleInfo) ProtoMessage() {}

func (x *RoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleInfo.ProtoReflect.Descriptor instead.
func (*RoleInfo) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{8}
}

func (x *RoleInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RoleInfo) GetImage() int32 {
	if x != nil {
		return x.Image
	}
	return 0
}

func (x *RoleInfo) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *RoleInfo) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *RoleInfo) GetDef() int32 {
	if x != nil {
		return x.Def
	}
	return 0
}

func (x *RoleInfo) GetAtk() int32 {
	if x != nil {
		return x.Atk
	}
	return 0
}

func (x *RoleInfo) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *RoleInfo) GetIsMonster() bool {
	if x != nil {
		return x.IsMonster
	}
	return false
}

func (x *RoleInfo) GetNftId() int32 {
	if x != nil {
		return x.NftId
	}
	return 0
}

type RoleState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 角色位置 | @inject_tag: msgpack:"pos" json:"pos"
	Pos *RolePosition `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos" msgpack:"pos"`
	// 角色技能信息 | @inject_tag: msgpack:"skill" json:"skill"
	Skill *RoleSkill `protobuf:"bytes,2,opt,name=skill,proto3" json:"skill" msgpack:"skill"`
}

func (x *RoleState) Reset() {
	*x = RoleState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleState) ProtoMessage() {}

func (x *RoleState) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleState.ProtoReflect.Descriptor instead.
func (*RoleState) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{9}
}

func (x *RoleState) GetPos() *RolePosition {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *RoleState) GetSkill() *RoleSkill {
	if x != nil {
		return x.Skill
	}
	return nil
}

// 玩家位置信息
type RolePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// x 轴坐标，0~6 一共 7 列 @inject_tag: msgpack:"x" json:"x"
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x" msgpack:"x"`
	// y 轴坐标 | @inject_tag: msgpack:"y" json:"y"
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y" msgpack:"y"`
}

func (x *RolePosition) Reset() {
	*x = RolePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolePosition) ProtoMessage() {}

func (x *RolePosition) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolePosition.ProtoReflect.Descriptor instead.
func (*RolePosition) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{10}
}

func (x *RolePosition) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *RolePosition) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type RoleSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 技能 id | @inject_tag: msgpack:"id" json:"id"
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" msgpack:"id"`
	// 技能状态 | @inject_tag: msgpack:"state" json:"state"
	State SkillState `protobuf:"varint,2,opt,name=state,proto3,enum=throw.v1.SkillState" json:"state" msgpack:"state"`
}

func (x *RoleSkill) Reset() {
	*x = RoleSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleSkill) ProtoMessage() {}

func (x *RoleSkill) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleSkill.ProtoReflect.Descriptor instead.
func (*RoleSkill) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{11}
}

func (x *RoleSkill) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleSkill) GetState() SkillState {
	if x != nil {
		return x.State
	}
	return SkillState_SkillStateEmpty0
}

type BrPlayerDie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 陨落的用户 id | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 角色 id | @inject_tag: msgpack:"roleId" json:"roleId"
	RoleId int32 `protobuf:"varint,2,opt,name=roleId,proto3" json:"roleId" msgpack:"roleId"`
	// 在该位置陨落 | @inject_tag: msgpack:"diePos" json:"diePos"
	DiePos *RolePosition `protobuf:"bytes,3,opt,name=diePos,proto3" json:"diePos" msgpack:"diePos"`
}

func (x *BrPlayerDie) Reset() {
	*x = BrPlayerDie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrPlayerDie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrPlayerDie) ProtoMessage() {}

func (x *BrPlayerDie) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrPlayerDie.ProtoReflect.Descriptor instead.
func (*BrPlayerDie) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{12}
}

func (x *BrPlayerDie) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrPlayerDie) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *BrPlayerDie) GetDiePos() *RolePosition {
	if x != nil {
		return x.DiePos
	}
	return nil
}

type BrGameEndOf1V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 赢方信息 | @inject_tag: msgpack:"winPlayer" json:"winPlayer"
	WinPlayer *Player `protobuf:"bytes,1,opt,name=winPlayer,proto3" json:"winPlayer" msgpack:"winPlayer"`
	// 败方信息 | @inject_tag: msgpack:"losePlayer" json:"losePlayer"
	LosePlayer *Player `protobuf:"bytes,2,opt,name=losePlayer,proto3" json:"losePlayer" msgpack:"losePlayer"`
	// 备注信息 | @inject_tag: msgpack:"desc" json:"desc"
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc" msgpack:"desc"`
	// 结算信息 | @inject_tag: msgpack:"playerSettles" json:"playerSettles"
	PlayerSettles []*PlayerSettleInfo `protobuf:"bytes,4,rep,name=playerSettles,proto3" json:"playerSettles" msgpack:"playerSettles"`
	// 战斗时长，秒数 | @inject_tag: msgpack:"usedTimeSec" json:"usedTimeSec"
	UsedTimeSec int32 `protobuf:"varint,5,opt,name=usedTimeSec,proto3" json:"usedTimeSec" msgpack:"usedTimeSec"`
	// 当前用户 id | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
}

func (x *BrGameEndOf1V1) Reset() {
	*x = BrGameEndOf1V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrGameEndOf1V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrGameEndOf1V1) ProtoMessage() {}

func (x *BrGameEndOf1V1) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrGameEndOf1V1.ProtoReflect.Descriptor instead.
func (*BrGameEndOf1V1) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{13}
}

func (x *BrGameEndOf1V1) GetWinPlayer() *Player {
	if x != nil {
		return x.WinPlayer
	}
	return nil
}

func (x *BrGameEndOf1V1) GetLosePlayer() *Player {
	if x != nil {
		return x.LosePlayer
	}
	return nil
}

func (x *BrGameEndOf1V1) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *BrGameEndOf1V1) GetPlayerSettles() []*PlayerSettleInfo {
	if x != nil {
		return x.PlayerSettles
	}
	return nil
}

func (x *BrGameEndOf1V1) GetUsedTimeSec() int32 {
	if x != nil {
		return x.UsedTimeSec
	}
	return 0
}

func (x *BrGameEndOf1V1) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// 游戏结束后，玩家的结算信息
type PlayerSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当前距离 | @inject_tag: msgpack:"curDistance" json:"curDistance"
	CurDistance int32 `protobuf:"varint,1,opt,name=curDistance,proto3" json:"curDistance" msgpack:"curDistance"`
	// 最高记录的距离 | @inject_tag: msgpack:"maxDistance" json:"maxDistance"
	MaxDistance int32 `protobuf:"varint,2,opt,name=maxDistance,proto3" json:"maxDistance" msgpack:"maxDistance"`
	// 击杀 boss 的数量 | @inject_tag: msgpack:"killBossNum" json:"killBossNum"
	KillBossNum int32 `protobuf:"varint,3,opt,name=killBossNum,proto3" json:"killBossNum" msgpack:"killBossNum"`
	// 最高生命值 | @inject_tag: msgpack:"maxHp" json:"maxHp"
	MaxHp int32 `protobuf:"varint,4,opt,name=maxHp,proto3" json:"maxHp" msgpack:"maxHp"`
	// 最高攻击力 | @inject_tag: msgpack:"maxAtk" json:"maxAtk"
	MaxAtk int32 `protobuf:"varint,5,opt,name=maxAtk,proto3" json:"maxAtk" msgpack:"maxAtk"`
	// 用户 id | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 角色 id | @inject_tag: msgpack:"roleId" json:"roleId"
	RoleId int32 `protobuf:"varint,7,opt,name=roleId,proto3" json:"roleId" msgpack:"roleId"`
}

func (x *PlayerSettleInfo) Reset() {
	*x = PlayerSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSettleInfo) ProtoMessage() {}

func (x *PlayerSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSettleInfo.ProtoReflect.Descriptor instead.
func (*PlayerSettleInfo) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{14}
}

func (x *PlayerSettleInfo) GetCurDistance() int32 {
	if x != nil {
		return x.CurDistance
	}
	return 0
}

func (x *PlayerSettleInfo) GetMaxDistance() int32 {
	if x != nil {
		return x.MaxDistance
	}
	return 0
}

func (x *PlayerSettleInfo) GetKillBossNum() int32 {
	if x != nil {
		return x.KillBossNum
	}
	return 0
}

func (x *PlayerSettleInfo) GetMaxHp() int32 {
	if x != nil {
		return x.MaxHp
	}
	return 0
}

func (x *PlayerSettleInfo) GetMaxAtk() int32 {
	if x != nil {
		return x.MaxAtk
	}
	return 0
}

func (x *PlayerSettleInfo) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerSettleInfo) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

type ScGetNewRoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 若干段路的数据 | @inject_tag: msgpack:"data" json:"data"
	Data []*OnePassageRoad `protobuf:"bytes,1,rep,name=data,proto3" json:"data" msgpack:"data"`
}

func (x *ScGetNewRoad) Reset() {
	*x = ScGetNewRoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGetNewRoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGetNewRoad) ProtoMessage() {}

func (x *ScGetNewRoad) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGetNewRoad.ProtoReflect.Descriptor instead.
func (*ScGetNewRoad) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{15}
}

func (x *ScGetNewRoad) GetData() []*OnePassageRoad {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScGetNewRoadV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 若干段路的数据 | @inject_tag: msgpack:"data" json:"data"
	Data []*OnePassageRoad `protobuf:"bytes,1,rep,name=data,proto3" json:"data" msgpack:"data"`
}

func (x *ScGetNewRoadV1) Reset() {
	*x = ScGetNewRoadV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGetNewRoadV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGetNewRoadV1) ProtoMessage() {}

func (x *ScGetNewRoadV1) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGetNewRoadV1.ProtoReflect.Descriptor instead.
func (*ScGetNewRoadV1) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{16}
}

func (x *ScGetNewRoadV1) GetData() []*OnePassageRoad {
	if x != nil {
		return x.Data
	}
	return nil
}

// 一段路的格子
type OnePassageRoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 一段路上的若干个格子信息 | @inject_tag: msgpack:"cells" json:"cells"
	Cells []*OneCell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells" msgpack:"cells"`
}

func (x *OnePassageRoad) Reset() {
	*x = OnePassageRoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnePassageRoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnePassageRoad) ProtoMessage() {}

func (x *OnePassageRoad) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnePassageRoad.ProtoReflect.Descriptor instead.
func (*OnePassageRoad) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{17}
}

func (x *OnePassageRoad) GetCells() []*OneCell {
	if x != nil {
		return x.Cells
	}
	return nil
}

// 一个格子
type OneCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 路上的一格，格子信息 | @inject_tag: msgpack:"cellInfo" json:"cellInfo"
	CellInfo []int32 `protobuf:"varint,1,rep,packed,name=cellInfo,proto3" json:"cellInfo" msgpack:"cellInfo"`
}

func (x *OneCell) Reset() {
	*x = OneCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneCell) ProtoMessage() {}

func (x *OneCell) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneCell.ProtoReflect.Descriptor instead.
func (*OneCell) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{18}
}

func (x *OneCell) GetCellInfo() []int32 {
	if x != nil {
		return x.CellInfo
	}
	return nil
}

type ScBossFightRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 角色生命值 | @inject_tag: msgpack:"flag" json:"flag"
	RoleHp int32 `protobuf:"varint,1,opt,name=roleHp,proto3" json:"flag" msgpack:"flag"`
	// 获得的金币数 | @inject_tag: msgpack:"goldNum" json:"goldNum"
	GoldNum int32 `protobuf:"varint,2,opt,name=goldNum,proto3" json:"goldNum" msgpack:"goldNum"`
	// 宝箱掉落情况 | @inject_tag: msgpack:"crates" json:"crates"
	Crates map[int32]int32 `protobuf:"bytes,3,rep,name=crates,proto3" json:"crates" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" msgpack:"crates"`
	// 先手情况。0表示玩家先手，1表示 boss 先手；| @inject_tag: msgpack:"flag" json:"flag"
	Flag int32 `protobuf:"varint,4,opt,name=flag,proto3" json:"flag" msgpack:"flag"`
}

func (x *ScBossFightRes) Reset() {
	*x = ScBossFightRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScBossFightRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScBossFightRes) ProtoMessage() {}

func (x *ScBossFightRes) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScBossFightRes.ProtoReflect.Descriptor instead.
func (*ScBossFightRes) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{19}
}

func (x *ScBossFightRes) GetRoleHp() int32 {
	if x != nil {
		return x.RoleHp
	}
	return 0
}

func (x *ScBossFightRes) GetGoldNum() int32 {
	if x != nil {
		return x.GoldNum
	}
	return 0
}

func (x *ScBossFightRes) GetCrates() map[int32]int32 {
	if x != nil {
		return x.Crates
	}
	return nil
}

func (x *ScBossFightRes) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type ScPickItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家的生命值 | @inject_tag: msgpack:"hp" json:"hp"
	Hp int32 `protobuf:"varint,1,opt,name=hp,proto3" json:"hp" msgpack:"hp"`
	// 玩家的攻击力 | @inject_tag: msgpack:"atk" json:"atk"
	Atk int32 `protobuf:"varint,2,opt,name=atk,proto3" json:"atk" msgpack:"atk"`
	// 玩家的原初之力 | @inject_tag: msgpack:"power" json:"power"
	Power int32 `protobuf:"varint,3,opt,name=power,proto3" json:"power" msgpack:"power"`
}

func (x *ScPickItemReq) Reset() {
	*x = ScPickItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScPickItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScPickItemReq) ProtoMessage() {}

func (x *ScPickItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScPickItemReq.ProtoReflect.Descriptor instead.
func (*ScPickItemReq) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{20}
}

func (x *ScPickItemReq) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *ScPickItemReq) GetAtk() int32 {
	if x != nil {
		return x.Atk
	}
	return 0
}

func (x *ScPickItemReq) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

type CsJudgeOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 列，位置的 x 坐标值，从 0 开始计数 | @inject_tag: msgpack:"x" json:"x"
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x" msgpack:"x"`
	// 行，位置的 y 坐标值，从 0 开始计数 | @inject_tag: msgpack:"y" json:"y"
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y" msgpack:"y"`
	// 操作类型 | @inject_tag: msgpack:"opType" json:"opType"
	OpType OperateType `protobuf:"varint,3,opt,name=opType,proto3,enum=throw.v1.OperateType" json:"opType" msgpack:"opType"`
}

func (x *CsJudgeOpt) Reset() {
	*x = CsJudgeOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsJudgeOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsJudgeOpt) ProtoMessage() {}

func (x *CsJudgeOpt) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsJudgeOpt.ProtoReflect.Descriptor instead.
func (*CsJudgeOpt) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{21}
}

func (x *CsJudgeOpt) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CsJudgeOpt) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *CsJudgeOpt) GetOpType() OperateType {
	if x != nil {
		return x.OpType
	}
	return OperateType_OptEmpty
}

type BrPickItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 奖励类型 | @inject_tag: msgpack:"awardType" json:"awardType"
	AwardType AwardType `protobuf:"varint,2,opt,name=awardType,proto3,enum=throw.v1.AwardType" json:"awardType" msgpack:"awardType"`
	// 对应的值,如生命值,攻击力等.可能是负值 | @inject_tag: msgpack:"awardVal" json:"awardVal"
	AwardVal int32 `protobuf:"varint,3,opt,name=awardVal,proto3" json:"awardVal" msgpack:"awardVal"`
	// 属性更新后的最终值 | @inject_tag: msgpack:"resVal" json:"resVal"
	ResVal int32 `protobuf:"varint,4,opt,name=resVal,proto3" json:"resVal" msgpack:"resVal"`
}

func (x *BrPickItem) Reset() {
	*x = BrPickItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrPickItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrPickItem) ProtoMessage() {}

func (x *BrPickItem) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrPickItem.ProtoReflect.Descriptor instead.
func (*BrPickItem) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{22}
}

func (x *BrPickItem) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrPickItem) GetAwardType() AwardType {
	if x != nil {
		return x.AwardType
	}
	return AwardType_AwardTypeEmpty
}

func (x *BrPickItem) GetAwardVal() int32 {
	if x != nil {
		return x.AwardVal
	}
	return 0
}

func (x *BrPickItem) GetResVal() int32 {
	if x != nil {
		return x.ResVal
	}
	return 0
}

// 玩家掉落后,复活后回退数格后的位置信息
type BrPlayerRollback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" msgpack:"uid"`
	// 角色所在坐标 | @inject_tag: msgpack:"newPos" json:"newPos"
	NewPos *RolePosition `protobuf:"bytes,2,opt,name=newPos,proto3" json:"newPos" msgpack:"newPos"`
}

func (x *BrPlayerRollback) Reset() {
	*x = BrPlayerRollback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrPlayerRollback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrPlayerRollback) ProtoMessage() {}

func (x *BrPlayerRollback) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrPlayerRollback.ProtoReflect.Descriptor instead.
func (*BrPlayerRollback) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{23}
}

func (x *BrPlayerRollback) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrPlayerRollback) GetNewPos() *RolePosition {
	if x != nil {
		return x.NewPos
	}
	return nil
}

type BrRolePositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 房间内玩家信息 | @inject_tag: msgpack:"roomDetail" json:"roomDetail"
	RoomDetail *RoomDetail `protobuf:"bytes,2,opt,name=roomDetail,proto3" json:"roomDetail" msgpack:"roomDetail"`
}

func (x *BrRolePositions) Reset() {
	*x = BrRolePositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrRolePositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrRolePositions) ProtoMessage() {}

func (x *BrRolePositions) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrRolePositions.ProtoReflect.Descriptor instead.
func (*BrRolePositions) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{24}
}

func (x *BrRolePositions) GetRoomDetail() *RoomDetail {
	if x != nil {
		return x.RoomDetail
	}
	return nil
}

var File_rainbow_proto protoreflect.FileDescriptor

var file_rainbow_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x22, 0x4e, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1b, 0x0a, 0x07, 0x45, 0x72, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x21, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa9, 0x03, 0x0a, 0x0b, 0x4a, 0x6f,
	0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07,
	0x6e, 0x65, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x07, 0x6e, 0x65, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x62,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x4e, 0x66, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x4e, 0x66, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x70, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x05, 0x52, 0x07, 0x70, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x0c, 0x61, 0x69, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x61, 0x69, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6e, 0x65, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x74,
	0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x74, 0x4e, 0x66, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x76, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x69, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x65, 0x65, 0x64, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x48, 0x0a, 0x0a,
	0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x68,
	0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x7d, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x68, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x65, 0x66,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x74, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61,
	0x74, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x66,
	0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x66, 0x74, 0x49, 0x64,
	0x22, 0x60, 0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x68, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x22, 0x2a, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0x47,
	0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x68, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x67, 0x0a, 0x0b, 0x42, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x69, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x06, 0x64, 0x69, 0x65, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x69, 0x65, 0x50, 0x6f, 0x73,
	0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x42, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x4f, 0x66,
	0x31, 0x56, 0x31, 0x12, 0x2e, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22,
	0xd0, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c,
	0x42, 0x6f, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6b,
	0x69, 0x6c, 0x6c, 0x42, 0x6f, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x78, 0x48, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x48, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0x3c, 0x0a, 0x0c, 0x53, 0x63, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x6f,
	0x61, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x3e, 0x0a, 0x0e, 0x53, 0x63, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x61, 0x64,
	0x56, 0x31, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x39, 0x0a, 0x0e, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f,
	0x61, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x25, 0x0a, 0x07, 0x4f,
	0x6e, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xcf, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x42, 0x6f, 0x73, 0x73, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x48, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x48, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x67, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x42, 0x6f, 0x73, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x73, 0x2e, 0x43, 0x72, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63,
	0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x0d, 0x53, 0x63, 0x50, 0x69, 0x63, 0x6b, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x68, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x74, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x61, 0x74, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x57, 0x0a,
	0x0a, 0x43, 0x73, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x42, 0x72, 0x50, 0x69, 0x63,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x68, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x22, 0x54,
	0x0a, 0x10, 0x42, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6e, 0x65,
	0x77, 0x50, 0x6f, 0x73, 0x22, 0x47, 0x0a, 0x0f, 0x42, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x68,
	0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2a, 0x2b, 0x0a,
	0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x76, 0x65,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x76, 0x70, 0x31, 0x76, 0x31, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x76, 0x70, 0x31, 0x76, 0x6e, 0x10, 0x02, 0x2a, 0x3a, 0x0a, 0x0a, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x30, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x2a, 0x48, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x63,
	0x61, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x10, 0x04,
	0x2a, 0x3b, 0x0a, 0x09, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x74, 0x6b,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x03, 0x42, 0x3b, 0x5a,
	0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x68, 0x61,
	0x6e, 0x79, 0x75, 0x6a, 0x69, 0x65, 0x2f, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x61, 0x69,
	0x6e, 0x62, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_rainbow_proto_rawDescOnce sync.Once
	file_rainbow_proto_rawDescData = file_rainbow_proto_rawDesc
)

func file_rainbow_proto_rawDescGZIP() []byte {
	file_rainbow_proto_rawDescOnce.Do(func() {
		file_rainbow_proto_rawDescData = protoimpl.X.CompressGZIP(file_rainbow_proto_rawDescData)
	})
	return file_rainbow_proto_rawDescData
}

var file_rainbow_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_rainbow_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_rainbow_proto_goTypes = []interface{}{
	(GameType)(0),            // 0: throw.v1.GameType
	(SkillState)(0),          // 1: throw.v1.SkillState
	(OperateType)(0),         // 2: throw.v1.OperateType
	(AwardType)(0),           // 3: throw.v1.AwardType
	(*Message)(nil),          // 4: throw.v1.Message
	(*ErrInfo)(nil),          // 5: throw.v1.ErrInfo
	(*NormalInfo)(nil),       // 6: throw.v1.NormalInfo
	(*UserLogin)(nil),        // 7: throw.v1.UserLogin
	(*JoinGameReq)(nil),      // 8: throw.v1.JoinGameReq
	(*ScPlayerJoin)(nil),     // 9: throw.v1.ScPlayerJoin
	(*RoomDetail)(nil),       // 10: throw.v1.RoomDetail
	(*Player)(nil),           // 11: throw.v1.Player
	(*RoleInfo)(nil),         // 12: throw.v1.RoleInfo
	(*RoleState)(nil),        // 13: throw.v1.RoleState
	(*RolePosition)(nil),     // 14: throw.v1.RolePosition
	(*RoleSkill)(nil),        // 15: throw.v1.RoleSkill
	(*BrPlayerDie)(nil),      // 16: throw.v1.BrPlayerDie
	(*BrGameEndOf1V1)(nil),   // 17: throw.v1.BrGameEndOf1V1
	(*PlayerSettleInfo)(nil), // 18: throw.v1.PlayerSettleInfo
	(*ScGetNewRoad)(nil),     // 19: throw.v1.ScGetNewRoad
	(*ScGetNewRoadV1)(nil),   // 20: throw.v1.ScGetNewRoadV1
	(*OnePassageRoad)(nil),   // 21: throw.v1.OnePassageRoad
	(*OneCell)(nil),          // 22: throw.v1.OneCell
	(*ScBossFightRes)(nil),   // 23: throw.v1.ScBossFightRes
	(*ScPickItemReq)(nil),    // 24: throw.v1.ScPickItemReq
	(*CsJudgeOpt)(nil),       // 25: throw.v1.CsJudgeOpt
	(*BrPickItem)(nil),       // 26: throw.v1.BrPickItem
	(*BrPlayerRollback)(nil), // 27: throw.v1.BrPlayerRollback
	(*BrRolePositions)(nil),  // 28: throw.v1.BrRolePositions
	nil,                      // 29: throw.v1.ScBossFightRes.CratesEntry
}
var file_rainbow_proto_depIdxs = []int32{
	0,  // 0: throw.v1.JoinGameReq.roomType:type_name -> throw.v1.GameType
	10, // 1: throw.v1.ScPlayerJoin.room:type_name -> throw.v1.RoomDetail
	11, // 2: throw.v1.RoomDetail.players:type_name -> throw.v1.Player
	12, // 3: throw.v1.Player.roleInfo:type_name -> throw.v1.RoleInfo
	13, // 4: throw.v1.Player.roleState:type_name -> throw.v1.RoleState
	14, // 5: throw.v1.RoleState.pos:type_name -> throw.v1.RolePosition
	15, // 6: throw.v1.RoleState.skill:type_name -> throw.v1.RoleSkill
	1,  // 7: throw.v1.RoleSkill.state:type_name -> throw.v1.SkillState
	14, // 8: throw.v1.BrPlayerDie.diePos:type_name -> throw.v1.RolePosition
	11, // 9: throw.v1.BrGameEndOf1V1.winPlayer:type_name -> throw.v1.Player
	11, // 10: throw.v1.BrGameEndOf1V1.losePlayer:type_name -> throw.v1.Player
	18, // 11: throw.v1.BrGameEndOf1V1.playerSettles:type_name -> throw.v1.PlayerSettleInfo
	21, // 12: throw.v1.ScGetNewRoad.data:type_name -> throw.v1.OnePassageRoad
	21, // 13: throw.v1.ScGetNewRoadV1.data:type_name -> throw.v1.OnePassageRoad
	22, // 14: throw.v1.OnePassageRoad.cells:type_name -> throw.v1.OneCell
	29, // 15: throw.v1.ScBossFightRes.crates:type_name -> throw.v1.ScBossFightRes.CratesEntry
	2,  // 16: throw.v1.CsJudgeOpt.opType:type_name -> throw.v1.OperateType
	3,  // 17: throw.v1.BrPickItem.awardType:type_name -> throw.v1.AwardType
	14, // 18: throw.v1.BrPlayerRollback.newPos:type_name -> throw.v1.RolePosition
	10, // 19: throw.v1.BrRolePositions.roomDetail:type_name -> throw.v1.RoomDetail
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_rainbow_proto_init() }
func file_rainbow_proto_init() {
	if File_rainbow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rainbow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScPlayerJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrPlayerDie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrGameEndOf1V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGetNewRoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGetNewRoadV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnePassageRoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScBossFightRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScPickItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsJudgeOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrPickItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrPlayerRollback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrRolePositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rainbow_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rainbow_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rainbow_proto_goTypes,
		DependencyIndexes: file_rainbow_proto_depIdxs,
		EnumInfos:         file_rainbow_proto_enumTypes,
		MessageInfos:      file_rainbow_proto_msgTypes,
	}.Build()
	File_rainbow_proto = out.File
	file_rainbow_proto_rawDesc = nil
	file_rainbow_proto_goTypes = nil
	file_rainbow_proto_depIdxs = nil
}
