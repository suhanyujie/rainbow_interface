syntax = "proto3";

package rainbow.v1;
option go_package = "github.com/suhanyujie/throw_interface/proto/rainbow/v1;v1";

// 客户端请求服务端结构
message Message {
  // 消息 id | @inject_tag: msgpack:"message_id" json:"message_id"
  string message_id = 1;
  // 用户 id | @inject_tag: msgpack:"uid" json:"uid"
  int64 uid = 2;
  // 协议携带的数据 | @inject_tag: msgpack:"data" json:"data"
  bytes data = 3;
}

message ErrInfo {
  // 备注信息 | @inject_tag: msgpack:"msg" json:"msg"
  string msg = 1;
}

message NormalInfo {
  // 备注信息 | @inject_tag: msgpack:"msg" json:"msg"
  string msg = 1;
}

// 客户端建立连接后，请求一次登录，参数是用户的 token
message UserLogin {
  // 用户的 token，一般从平台获取 | @inject_tag: msgpack:"token" json:"token"
  string token = 1;
}

message JoinGameReq {
  // 平台提供的房间 id，结算时透传。因为是长整，恐前端会溢出，所以用字符串类型。ext 前缀表示 external | @inject_tag: msgpack:"extRoomId" json:"extRoomId"
  optional string extRoomId = 1;
  // 平台的对局 id，全局唯一 [必填] | @inject_tag: msgpack:"extMatchId" json:"extMatchId"
  string extMatchId = 2;
  // 是否与机器人对战 | @inject_tag: msgpack:"needBot" json:"needBot"
  optional bool needBot = 3;
  // 机器人的 uid | @inject_tag: msgpack:"botId" json:"botId"
  optional int32 botId = 4;
  // 机器人的 nft | @inject_tag: msgpack:"botNft" json:"botNft"
  optional int32 botNft = 5;
  // 门票 | @inject_tag: msgpack:"ticket" json:"ticket"
  optional float ticket = 6;
  // 对战类型，平台参数，区分 1v1，淘汰赛等 | @inject_tag: msgpack:"pvpType" json:"pvpType"
  optional int32 pvpType = 7;
  // 游戏类型 [必填] | @inject_tag: msgpack:"roomType" json:"roomType"
  GameType roomType = 8;
  // 机器人的 ai 策略类型 | @inject_tag: msgpack:"aiPolicyType" json:"aiPolicyType"
  optional int32 aiPolicyType = 9;
  // 关卡/难度 [必填] | @inject_tag: msgpack:"levelId" json:"levelId"
  int32 levelId = 10;
}

enum GameType {
  // pve
  Pve = 0;
  // pvp 1v1
  Pvp1v1 = 1;
  // 多人同屏
  Pvp1vn = 2;
}

// 玩家加入房间
message ScPlayerJoin {
  // 玩家用户 id | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 游戏的关卡 id | @inject_tag: msgpack:"levelId" json:"levelId"
  int32 levelId = 2;
  // 房间内信息 | @inject_tag: msgpack:"room" json:"room"
  RoomDetail room = 3;
  // 是否需要镜像,没用到可以先忽略 | @inject_tag: msgpack:"needMirror" json:"needMirror"
  int32 needMirror = 4;
  // 是否是新的对局 | @inject_tag: msgpack:"isNewMatch" json:"isNewMatch"
  bool isNewMatch = 5;
  // 游戏已经开始多久了。秒 | @inject_tag: msgpack:"gameHasKeptSec" json:"gameHasKeptSec"
  int32 gameHasKeptSec = 6;
}

message RoomDetail {
  // room id | @inject_tag: msgpack:"id" json:"id"
  int32 id = 1;
  // 当前，房间内所有玩家信息 | @inject_tag: msgpack:"players" json:"players"
  repeated Player players = 2;
  // 房间内需要多少人才能开始游戏 | @inject_tag: msgpack:"maxUserNum" json:"maxUserNum"
  int32 maxUserNum = 3;
}

message Player {
  // 玩家用户 id | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 角色的详细信息 | @inject_tag: msgpack:"roleInfo" json:"roleInfo"
  RoleInfo roleInfo = 2;
  // 角色的详细信息 | @inject_tag: msgpack:"roleState" json:"roleState"
  RoleState roleState = 3;
}

message RoleInfo {
  // 角色 id | @inject_tag: msgpack:"id" json:"id"
  int32 id = 1;
  // @inject_tag: msgpack:"nickname" json:"nickname"
  string nickname = 2;
  // 角色相关资源 | @inject_tag: msgpack:"image" json:"image"
  int32 image = 3;
  // 品质 | @inject_tag: msgpack:"quality" json:"quality"
  int32 quality = 4;
  // 生命值 | @inject_tag: msgpack:"hp" json:"hp"
  int32 hp = 5;
  // 防御力 | @inject_tag: msgpack:"def" json:"def"
  int32 def = 6;
  // 攻击力 | @inject_tag: msgpack:"atk" json:"atk"
  int32 atk = 7;
  // 原初之力值 | @inject_tag: msgpack:"power" json:"power"
  int32 power = 8;
  // 技能 id | @inject_tag: msgpack:"skillId" json:"skillId"
  int32 skillId = 9;
  // 是否是怪物，true 怪物，false 角色 | @inject_tag: msgpack:"isMonster" json:"isMonster"
  bool isMonster = 10;
  // 角色对应的 nftId | @inject_tag: msgpack:"nftId" json:"nftId"
  int32 nftId = 11;
}

message RoleState {
  // 角色位置 | @inject_tag: msgpack:"pos" json:"pos"
  RolePosition pos = 1;
  // 角色技能信息 | @inject_tag: msgpack:"skill" json:"skill"
  RoleSkill skill = 2;
}

// 玩家位置信息
message RolePosition {
  // x 轴坐标，0~6 一共 7 列 @inject_tag: msgpack:"x" json:"x"
  int32 x = 1;
  // y 轴坐标 | @inject_tag: msgpack:"y" json:"y"
  int32 y = 2;
}

message RoleSkill {
  // 技能 id | @inject_tag: msgpack:"id" json:"id"
  int32 id = 1;
  // 技能状态 | @inject_tag: msgpack:"state" json:"state"
  SkillState state = 2;
  // 技能目标。如果目标是自己，则传自己的 uid | @inject_tag: msgpack:"targetUid" json:"targetUid"
  int32 targetUid = 3;
}

enum SkillState {
  SkillStateEmpty0 = 0;
  // 冷却、充能中
  Cooling = 1;
  // 就绪
  Ready = 2;
}

message CsGetNewRoadV1 {
  // 需要的地图片段索引 | @inject_tag: msgpack:"idx" json:"idx"
  int32 idx = 1;
}

message BrPlayerDie {
  // 陨落的用户 id | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 角色 id | @inject_tag: msgpack:"roleId" json:"roleId"
  int32 roleId = 2;
  // 在该位置陨落 | @inject_tag: msgpack:"diePos" json:"diePos"
  RolePosition diePos = 3;
}

message BrGameEndOf1V1 {
  // 赢方信息 | @inject_tag: msgpack:"winPlayer" json:"winPlayer"
  Player winPlayer = 1;
  // 败方信息 | @inject_tag: msgpack:"losePlayer" json:"losePlayer"
  Player losePlayer = 2;
  // 备注信息 | @inject_tag: msgpack:"desc" json:"desc"
  string desc = 3;
  // 结算信息 | @inject_tag: msgpack:"playerSettles" json:"playerSettles"
  repeated PlayerSettleInfo playerSettles = 4;
  // 战斗时长，秒数 | @inject_tag: msgpack:"usedTimeSec" json:"usedTimeSec"
  int32 usedTimeSec = 5;
  // 游戏结束原因信息 | @inject_tag: msgpack:"gameOverInfo" json:"gameOverInfo"
  GameOverType gameOverType = 6;
  // 房间内玩家排名信息 | @inject_tag: msgpack:"rankedPlayers" json:"rankedPlayers"
  repeated Player rankedPlayers = 7;
}

enum GameOverType {
  GOT_Empty = 0;
  // 角色掉落
  RoleDie = 1;
  // 角色都掉落
  RoleAllDie = 2;
  // 枢纽战斗死亡
  FightDie = 3;
}

// 游戏结束后，玩家的结算信息
message PlayerSettleInfo {
  // 当前距离 | @inject_tag: msgpack:"curDistance" json:"curDistance"
  int32 curDistance = 1;
  // 最高记录的距离 | @inject_tag: msgpack:"maxDistance" json:"maxDistance"
  int32 maxDistance = 2;
  // 击杀 boss 的数量 | @inject_tag: msgpack:"killBossNum" json:"killBossNum"
  int32 killBossNum = 3;
  // 最高生命值 | @inject_tag: msgpack:"maxHp" json:"maxHp"
  int32 maxHp = 4;
  // 最高攻击力 | @inject_tag: msgpack:"maxAtk" json:"maxAtk"
  int32 maxAtk = 5;
  // 用户 id | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 6;
  // 角色 id | @inject_tag: msgpack:"roleId" json:"roleId"
  int32 roleId = 7;
  // 玩家获得的代币数,如果是负数,则表示输掉的 | @inject_tag: msgpack:"gainToken" json:"gainToken"
  int32 gainToken = 8;
  // 1v1时，击倒对手的攻击次数，胜方才有该值 | @inject_tag: msgpack:"hitNum" json:"hitNum"
  int32 hitNum = 9;
  // 被攻击次数 | @inject_tag: msgpack:"beHitNum" json:"beHitNum"
  int32 beHitNum = 11;
  // 秒伤 | @inject_tag: msgpack:"hurtPerSec" json:"hurtPerSec"
  int32 hurtPerSec = 12;
  // 使用技能次数 | @inject_tag: msgpack:"usedSkillNum" json:"usedSkillNum"
  int32 usedSkillNum = 13;
}

message ScGetNewRoad {
  // 若干段路的数据 | @inject_tag: msgpack:"data" json:"data"
  repeated OnePassageRoad data = 1;
}

message ScGetNewRoadV1 {
  // 若干段路的数据 | @inject_tag: msgpack:"data" json:"data"
  repeated OnePassageRoad data = 1;
}

// 一段路的格子
message OnePassageRoad {
  // 一段路上的若干个格子信息 | @inject_tag: msgpack:"cells" json:"cells"
  repeated OneCell cells = 1;
}

// 一个格子
message OneCell {
  // 路上的一格，格子信息 | @inject_tag: msgpack:"cellInfo" json:"cellInfo"
  repeated int32 cellInfo = 1;
}

message ScBossFightRes {
  // 角色生命值 | @inject_tag: msgpack:"flag" json:"flag"
  int32 roleHp = 1;
  // 获得的金币数 | @inject_tag: msgpack:"goldNum" json:"goldNum"
  int32 goldNum = 2;
  // 宝箱掉落情况 | @inject_tag: msgpack:"crates" json:"crates"
  map<int32, int32> crates = 3;
  // 先手情况。0表示玩家先手，1表示 boss 先手；| @inject_tag: msgpack:"flag" json:"flag"
  int32 flag = 4;
}

message ScPickItemReq {
  // 玩家的生命值 | @inject_tag: msgpack:"hp" json:"hp"
  int32 hp = 1;
  // 玩家的攻击力 | @inject_tag: msgpack:"atk" json:"atk"
  int32 atk = 2;
  // 玩家的原初之力 | @inject_tag: msgpack:"power" json:"power"
  int32 power = 3;
}

message CsJudgeOpt {
  // 列，位置的 x 坐标值，从 0 开始计数 | @inject_tag: msgpack:"x" json:"x"
  int32 x = 1;
  // 行，位置的 y 坐标值，从 0 开始计数 | @inject_tag: msgpack:"y" json:"y"
  int32 y = 2;
  // 操作类型 | @inject_tag: msgpack:"opType" json:"opType"
  OperateType opType = 3;
}

enum OperateType {
  OptEmpty = 0;
  // 左滑
  Left = 1;
  // 右滑
  Right = 2;
  // 连接
  Concat = 3;
  // 弹起
  Bounce = 4;
}

message BrPickItem {
  // 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 奖励类型 | @inject_tag: msgpack:"awardType" json:"awardType"
  AwardType awardType = 2;
  // 对应的值,如生命值,攻击力等.可能是负值 | @inject_tag: msgpack:"awardVal" json:"awardVal"
  int32 awardVal = 3;
  // 属性更新后的最终值 | @inject_tag: msgpack:"resVal" json:"resVal"
  int32 resVal = 4;
}

enum AwardType {
  AwardTypeEmpty = 0;
  // 生命值
  Hp = 1;
  // 攻击力
  Atk = 2;
  // 原初之力
  Power = 3;
}

// 玩家掉落后,复活后回退数格后的位置信息
message BrPlayerRollback {
  // 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 角色所在坐标 | @inject_tag: msgpack:"newPos" json:"newPos"
  RolePosition newPos = 2;
}

message BrRolePositions {
  //房间内玩家信息 | @inject_tag: msgpack:"roomDetail" json:"roomDetail"
  RoomDetail roomDetail = 1;
  // 游戏开始多久了，毫秒 | @inject_tag: msgpack:"gameHasKeptSec" json:"gameHasKeptSec"
  int32 gameHasKeptSec = 2;
  // 服务器时间，毫秒时间戳 | @inject_tag: msgpack:"serverTime" json:"serverTime"
  uint64 serverTime = 3;
}

message ScGetRolePos {
  // 当前玩家的角色位置信息 | @inject_tag: msgpack:"pos" json:"pos"
  RolePosition pos = 1;
}

message BrRoleReachPivot {
  // 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 枢纽的 y 坐标值 | @inject_tag: msgpack:"pivotY" json:"pivotY"
  int32 pivotY = 2;
}

message BrGameStart {
  // 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 路程总长度 | @inject_tag: msgpack:"allDistance" json:"allDistance"
  int32 allDistance = 2;
  //房间内玩家信息 | @inject_tag: msgpack:"roomDetail" json:"roomDetail"
  RoomDetail roomDetail = 3;
}

message CsUseSkill {
  // 技能目标。如果目标是自己，则传自己的 uid | @inject_tag: msgpack:"targetUid" json:"targetUid"
  int32 targetUid = 1;
}

enum EffectType {
//  Effect0Normal = 0; // 普攻
//  Effect1KeepDecrHp = 1; // 持续掉血
//  Effect2ComboHit = 2; // 连击
//  Effect3ExtraHurt = 3; // 额外伤害
//  Effect4Rigidity = 4; // 僵直
//  Effect5DecrDef = 5; // 防御降低
//  Effect6BackWoundTime = 6; // 反伤时间
//  Effect7BackWoundTimes = 7; // 反伤次数
//  Effect8Hot = 8; // hot
//  Effect9IncrAtk = 9; // 攻击提升
//  Effect10Weak = 10; // 虚弱
//  Effect11Shield = 11; // 护盾
//  Effect12Thorns = 12; // 荆棘
//  Effect13IncrDef = 13; // 防御提升
//  Effect14 = 14; // 防御提升

    Effect0Normal = 0; // 普攻
    Effect1KeepDecrHp = 1; // 位移
    Effect2Rigidity = 2; // 僵直
    Effect3Fog = 3; // 迷雾
    Effect4ResistHurt = 4;// 抵消伤害
    Effect5Attract = 5;// 吸收
    Effect6Shadow = 6;// 分身
    Effect7DeBuffHp = 7;// 降低生命
    Effect8DeBuffAtk = 8;// 降低攻击
    Effect9Sprint = 9;// 冲刺
    Effect10BuffAtk = 10;// 提高攻击力
    Effect11Float = 11;// 漂浮

}

// 技能：位移
message ScSkillDisplacement {
  // 位移后的位置 | @inject_tag: msgpack:"newPos" json:"newPos"
  RolePosition newPos = 1;
}

// 技能效果生效信息-僵直
message ScSkillEffectInfo {
  // 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
  int32 fromUid = 1;
  // 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
  int32 keepSec = 2;
  // 技能效果类型 | @inject_tag: msgpack:"effType" json:"effType"
  EffectType effType = 3;
  // 受影响的玩家 id | @inject_tag: msgpack:"effUidArr" json:"effUidArr"
  repeated int32 effUidArr = 4;
}

// 技能：迷雾
message ScSkillFog {
  // 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
  int32 fromUid = 1;
  // 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
  int32 keepSec = 2;
  // 横向格子数.eg:3,表示从当前纵坐标开始向左数3列，再向右数3列，这个范围内的有雾 | @inject_tag: msgpack:"xNum" json:"xNum"
  int32 xNum = 4;
  // 纵向格子数 | @inject_tag: msgpack:"yNum" json:"yNum"
  int32 yNum = 5;
  // 区域类型。2前方最近；5后方最近；10前方，特定格子数 | @inject_tag: msgpack:"rangeType" json:"rangeType"
  int32 rangeType = 6;
  // 受影响的玩家 uid 列表 | @inject_tag: msgpack:"effUidArr" json:"effUidArr"
  repeated int32 effUidArr = 7;
}

// 技能：吸收
message ScSkillAttract {
  // 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
  int32 fromUid = 1;
  // 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
  int32 keepSec = 2;
  // 向前范围的格子数 | @inject_tag: msgpack:"yNum" json:"yNum"
  int32 yNum = 3;
  // 可吸取的石格类型列表 | @inject_tag: msgpack:"stTypes" json:"stTypes"
  // 石格类型：100原初之力+1；102 hp+；104 hp-；106 atk+；108 atk-
  // repeated int32 stTypes = 4;
  // 可吸收的格子位置列表 | @inject_tag: msgpack:"stones" json:"stones"
  repeated OneStone stones = 5;
}

message OneStone {
  // 一个格子信息 | @inject_tag: msgpack:"stone" json:"stone"
  repeated int32 stone = 1;
}

// 技能：分身
message ScSkillShadow {
  // 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
  int32 fromUid = 1;
  // 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
  int32 keepSec = 2;
  // 分身数量 | @inject_tag: msgpack:"num" json:"num"
  int32 num = 3;
  // 分身出现在这些 x 坐标位置，y 坐标与本体一致 | @inject_tag: msgpack:"xList" json:"xList"
  repeated int32 xList = 4;
}

message ScSkillDeBuffHp {
  // 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
  int32 fromUid = 1;
  // 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
  int32 keepSec = 2;
  // 生命值每秒降低的值 | @inject_tag: msgpack:"valPerSec" json:"valPerSec"
  int32 valPerSec = 3;
}

message ScSkillDeBuffAtk {
  // 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
  int32 fromUid = 1;
  // 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
  int32 keepSec = 2;
  // 降低的值 | @inject_tag: msgpack:"val" json:"val"
  int32 val = 3;
}

message ScSkillBuffAtk {
  // 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
  int32 fromUid = 1;
  // 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
  int32 keepSec = 2;
  // 降低的值 | @inject_tag: msgpack:"val" json:"val"
  int32 val = 3;
}

message ScSkillFloat {
  // 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
  int32 fromUid = 1;
  // 持续时间 | @inject_tag: msgpack:"keepSec" json:"keepSec"
  int32 keepSec = 2;
}

message ScSkillSprint {
  // 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
  int32 fromUid = 1;
  // 距离，格子数 | @inject_tag: msgpack:"distanceNum" json:"distanceNum"
  int32 distanceNum = 2;
  // 单位时间内，y 方向上移动的的格子数 | @inject_tag: msgpack:"speed" json:"speed"
  int32 speed = 3;
}

// 技能：抵挡伤害
message ScSkillResistHurt {
  // 施放技能的玩家 | @inject_tag: msgpack:"fromUid" json:"fromUid"
  int32 fromUid = 1;
  // 次数 | @inject_tag: msgpack:"times" json:"times"
  int32 times = 2;
  // 抵挡的伤害系数 | @inject_tag: msgpack:"scale" json:"scale"
  float scale = 3;
}

// buff 效果
// ref: https://zhuanlan.zhihu.com/p/150812545
message Buff {
  // 生效类型。按次数生效或这时间生效 | @inject_tag: msgpack:"effMode" json:"effMode"
  BuffEffMode effMode = 1;
  // 生效类型下对应的值。eg:按次数生效，这里存储剩余次数 | @inject_tag: msgpack:"effModeValue" json:"effModeValue"
  int32 effModeValue = 2;
  // buff 优先级，低优先级不能打断高优先级 buff | @inject_tag: msgpack:"priority" json:"priority"
  int32 priority = 3;
  // buff 开始生效的时间戳 | @inject_tag: msgpack:"startTime" json:"startTime"
  int32 startTime = 4;
  // buff 生效结束的时间戳 | @inject_tag: msgpack:"endTime" json:"endTime"
  int32 endTime = 5;
  // 对应的技能效果 id | @inject_tag: msgpack:"skillEffId" json:"skillEffId"
  int32 skillEffId = 6;
  // 对应的技能效果类型 | @inject_tag: msgpack:"skillEffType" json:"skillEffType"
  int32 skillEffType = 7;
  // buff 作用的角色属性 | @inject_tag: msgpack:"effRoleAttr" json:"effRoleAttr"
  BuffRoleAttr effRoleAttr = 8;
  // buff 的控制效果 | @inject_tag: msgpack:"controlEff" json:"controlEff"
  ControlEff controlEff = 9;
  // buff 的生效时机。eg:被攻击前生效/被攻击后生效/被攻击时生效/攻击别人前生效/攻击后生效 etc | @inject_tag: msgpack:"effTiming" json:"effTiming"
  EffTiming effTiming = 10;
}

enum EffTiming {
  EffTimingEmpty = 0;
  AtkBefore = 1; // 攻击前
  AtkWhen = 2; // 攻击时
  AtkAfter = 3;// 攻击后
  BeAtkBefore = 4; // 被攻击前
  BeAtkWhen = 5; // 被攻击时
  BeAtkAfter = 6;// 被攻击后
}

// buff 生效类型
enum BuffEffMode {
  BuffEffModeEmpty = 0;
  // 按次数生效
  Times = 1;
  // 按时间生效
  TimeSec = 2;
}

enum BuffRoleAttr {
  BuffRoleAttrEmpty = 0;
  // 角色属性-生命值
  RoleAttrHp = 1;
  // 角色属性-攻击力
  RoleAttrAtk = 2;
}

enum ControlEff {
  ControlEffEmpty = 0;
  // 僵直
  CEff_Rigidity = 1;
  // 眩晕
  CEff_Stun = 2;
  // 沉默
  CEff_Silence = 3;
  // 无敌
  CEff_Invincible = 4;
  // 隐身
  CEff_Invisible = 5;
  // 冲刺
  CEff_Sprint = 6;
  // 漂浮
  CEff_Float = 7;
}

message ScPlayerGameEndFor1vN {
  // 阵亡的玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 各个玩家的排名 | @inject_tag: msgpack:"ranks" json:"ranks"
  repeated Player ranks = 2;
}

message ScGetServerTime {
  // 当前服务器的时间，毫秒时间戳 | @inject_tag: msgpack:"timestamp" json:"timestamp"
  uint64 timestamp = 1;
}

// 收到其他玩家的技能攻击
message ScBeAtkBySkill {
  // 技能施放者 | @inject_tag: msgpack:"fromUid" json:"fromUid"
  int32 fromUid = 1;
  // 技能 id | @inject_tag: msgpack:"skillId" json:"skillId"
  int32 skillId = 2;
}

// 施放技能的前置信息，可用于在按钮上展示施放目标的头像
message ScReleaseSkillBeforeInfo {
  // 推荐的目标 uid | @inject_tag: msgpack:"recTargetUid" json:"recTargetUid"
  int32 recTargetUid = 1;
  // 推荐的目标角色 id | @inject_tag: msgpack:"recTargetRoleId" json:"recTargetRoleId"
  int32 recTargetRoleId = 2;
}


