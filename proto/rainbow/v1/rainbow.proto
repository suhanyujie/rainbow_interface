syntax = "proto3";

package throw.v1;
option go_package = "github.com/suhanyujie/throw_interface/proto/rainbow/v1;v1";

// 客户端请求服务端结构
message Message {
  // 消息 id | @inject_tag: msgpack:"message_id" json:"message_id"
  string message_id = 1;
  // 用户 id | @inject_tag: msgpack:"uid" json:"uid"
  int64 uid = 2;
  // 协议携带的数据 | @inject_tag: msgpack:"data" json:"data"
  bytes data = 3;
}

message ErrInfo {
  // 备注信息 | @inject_tag: msgpack:"msg" json:"msg"
  string msg = 1;
}

message NormalInfo {
  // 备注信息 | @inject_tag: msgpack:"msg" json:"msg"
  string msg = 1;
}

// 客户端建立连接后，请求一次登录，参数是用户的 token
message UserLogin {
  // 用户的 token，一般从平台获取 | @inject_tag: msgpack:"token" json:"token"
  string token = 1;
}

message JoinGameReq {
  // 平台提供的房间 id，结算时透传。因为是长整，恐前端会溢出，所以用字符串类型。ext 前缀表示 external | @inject_tag: msgpack:"extRoomId" json:"extRoomId"
  optional string extRoomId = 1;
  // 平台的对局 id，全局唯一 [必填] | @inject_tag: msgpack:"extMatchId" json:"extMatchId"
  string extMatchId = 2;
  // 是否与机器人对战 | @inject_tag: msgpack:"needBot" json:"needBot"
  optional bool needBot = 3;
  // 机器人的 uid | @inject_tag: msgpack:"botId" json:"botId"
  optional int32 botId = 4;
  // 机器人的 nft | @inject_tag: msgpack:"botNft" json:"botNft"
  optional int32 botNft = 5;
  // 门票 | @inject_tag: msgpack:"ticket" json:"ticket"
  optional float ticket = 6;
  // 对战类型，平台参数，区分 1v1，淘汰赛等 | @inject_tag: msgpack:"pvpType" json:"pvpType"
  optional int32 pvpType = 7;
  // 游戏类型 [必填] | @inject_tag: msgpack:"roomType" json:"roomType"
  GameType roomType = 8;
  // 机器人的 ai 策略类型 | @inject_tag: msgpack:"aiPolicyType" json:"aiPolicyType"
  optional int32 aiPolicyType = 9;
  // 关卡/难度 [必填] | @inject_tag: msgpack:"level" json:"level"
  int32 level = 10;
}

enum GameType {
  // pve
  Pve = 0;
  // pvp 1v1
  Pvp1v1 = 1;
  // 多人同屏
  Pvp1vn = 2;
}

// 玩家加入房间
message ScPlayerJoin {
  // 玩家用户 id | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 游戏的关卡 id | @inject_tag: msgpack:"levelId" json:"levelId"
  int32 levelId = 2;
  // 房间内信息 | @inject_tag: msgpack:"room" json:"room"
  RoomDetail room = 3;
  // 是否需要镜像,没用到可以先忽略 | @inject_tag: msgpack:"needMirror" json:"needMirror"
  int32 needMirror = 4;
}

message RoomDetail {
  // room id | @inject_tag: msgpack:"id" json:"id"
  int32 id = 1;
  // 当前，房间内所有玩家信息 | @inject_tag: msgpack:"players" json:"players"
  repeated Player players = 2;
}

message Player {
  // 玩家用户 id | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 角色的详细信息 | @inject_tag: msgpack:"roleInfo" json:"roleInfo"
  RoleInfo roleInfo = 2;
  // 角色的详细信息 | @inject_tag: msgpack:"roleState" json:"roleState"
  RoleState roleState = 3;
}

message RoleInfo {
  // 角色 id | @inject_tag: msgpack:"id" json:"id"
  int32 id = 1;
  // @inject_tag: msgpack:"nickname" json:"nickname"
  string nickname = 2;
  // 角色相关资源 | @inject_tag: msgpack:"image" json:"image"
  int32 image = 3;
  // 品质 | @inject_tag: msgpack:"quality" json:"quality"
  int32 quality = 4;
  // 生命值 | @inject_tag: msgpack:"hp" json:"hp"
  int32 hp = 5;
  // 防御力 | @inject_tag: msgpack:"def" json:"def"
  int32 def = 6;
  // 攻击力 | @inject_tag: msgpack:"atk" json:"atk"
  int32 atk = 7;
  // 技能 id | @inject_tag: msgpack:"skillId" json:"skillId"
  int32 skillId = 8;
  // 是否是怪物，true 怪物，false 角色 | @inject_tag: msgpack:"isMonster" json:"isMonster"
  bool isMonster = 9;
  // 角色对应的 nftId | @inject_tag: msgpack:"nftId" json:"nftId"
  int32 nftId = 10;
}

message RoleState {
  // 角色位置 | @inject_tag: msgpack:"pos" json:"pos"
  RolePosition pos = 1;
  // 角色技能信息 | @inject_tag: msgpack:"skill" json:"skill"
  RoleSkill skill = 2;
}

// 玩家位置信息
message RolePosition {
  // x 轴坐标，0~6 一共 7 列 @inject_tag: msgpack:"x" json:"x"
  int32 x = 1;
  // y 轴坐标 | @inject_tag: msgpack:"y" json:"y"
  int32 y = 2;
}

message RoleSkill {
  // 技能 id | @inject_tag: msgpack:"id" json:"id"
  int32 id = 1;
  // 技能状态 | @inject_tag: msgpack:"state" json:"state"
  SkillState state = 2;
}

enum SkillState {
  SkillStateEmpty0 = 0;
  // 冷却、充能中
  Cooling = 1;
  // 就绪
  Ready = 2;
}

message BrPlayerDie {
  // 陨落的用户 id | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 角色 id | @inject_tag: msgpack:"roleId" json:"roleId"
  int32 roleId = 2;
  // 在该位置陨落 | @inject_tag: msgpack:"diePos" json:"diePos"
  RolePosition diePos = 3;
}

message BrGameEndOf1V1 {
  // 赢方信息 | @inject_tag: msgpack:"winPlayer" json:"winPlayer"
  Player winPlayer = 1;
  // 败方信息 | @inject_tag: msgpack:"losePlayer" json:"losePlayer"
  Player losePlayer = 2;
  // 备注信息 | @inject_tag: msgpack:"desc" json:"desc"
  string desc = 3;
  // 结算信息 | @inject_tag: msgpack:"playerSettles" json:"playerSettles"
  repeated PlayerSettleInfo playerSettles = 4;
  // 战斗时长，秒数 | @inject_tag: msgpack:"usedTimeSec" json:"usedTimeSec"
  int32 usedTimeSec = 5;
  // 当前用户 id | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 6;
}

// 游戏结束后，玩家的结算信息
message PlayerSettleInfo {
  // 当前距离 | @inject_tag: msgpack:"curDistance" json:"curDistance"
  int32 curDistance = 1;
  // 最高记录的距离 | @inject_tag: msgpack:"maxDistance" json:"maxDistance"
  int32 maxDistance = 2;
  // 击杀 boss 的数量 | @inject_tag: msgpack:"killBossNum" json:"killBossNum"
  int32 killBossNum = 3;
  // 最高生命值 | @inject_tag: msgpack:"maxHp" json:"maxHp"
  int32 maxHp = 4;
  // 最高攻击力 | @inject_tag: msgpack:"maxAtk" json:"maxAtk"
  int32 maxAtk = 5;
  // 用户 id | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 6;
  // 角色 id | @inject_tag: msgpack:"roleId" json:"roleId"
  int32 roleId = 7;
}

message ScGetNewRoad {
  // 若干段路的数据 | @inject_tag: msgpack:"data" json:"data"
  repeated OnePassageRoad data = 1;
}

message ScGetNewRoadV1 {
  // 若干段路的数据 | @inject_tag: msgpack:"data" json:"data"
  repeated OnePassageRoad data = 1;
}

// 一段路的格子
message OnePassageRoad {
  // 一段路上的若干个格子信息 | @inject_tag: msgpack:"cells" json:"cells"
  repeated OneCell cells = 1;
}

// 一个格子
message OneCell {
  // 路上的一格，格子信息 | @inject_tag: msgpack:"cellInfo" json:"cellInfo"
  repeated int32 cellInfo = 1;
}

message ScBossFightRes {
  // 角色生命值 | @inject_tag: msgpack:"flag" json:"flag"
  int32 roleHp = 1;
  // 获得的金币数 | @inject_tag: msgpack:"goldNum" json:"goldNum"
  int32 goldNum = 2;
  // 宝箱掉落情况 | @inject_tag: msgpack:"crates" json:"crates"
  map<int32, int32> crates = 3;
  // 先手情况。0表示玩家先手，1表示 boss 先手；| @inject_tag: msgpack:"flag" json:"flag"
  int32 flag = 4;
}

message ScPickItemReq {
  // 玩家的生命值 | @inject_tag: msgpack:"hp" json:"hp"
  int32 hp = 1;
  // 玩家的攻击力 | @inject_tag: msgpack:"atk" json:"atk"
  int32 atk = 2;
  // 玩家的原初之力 | @inject_tag: msgpack:"power" json:"power"
  int32 power = 3;
}

message CsJudgeOpt {
  // 列，位置的 x 坐标值，从 0 开始计数 | @inject_tag: msgpack:"x" json:"x"
  int32 x = 1;
  // 行，位置的 y 坐标值，从 0 开始计数 | @inject_tag: msgpack:"y" json:"y"
  int32 y = 2;
  // 操作类型 | @inject_tag: msgpack:"opType" json:"opType"
  OperateType opType = 3;
}

enum OperateType {
  OptEmpty = 0;
  // 左滑
  Left = 1;
  // 右滑
  Right = 2;
  // 连接
  Concat = 3;
  // 弹起
  Bounce = 4;
}

message BrPickItem {
  // 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 奖励类型 | @inject_tag: msgpack:"awardType" json:"awardType"
  AwardType awardType = 2;
  // 对应的值,如生命值,攻击力等.可能是负值 | @inject_tag: msgpack:"awardVal" json:"awardVal"
  int32 awardVal = 3;
  // 属性更新后的最终值 | @inject_tag: msgpack:"resVal" json:"resVal"
  int32 resVal = 4;
}

enum AwardType {
  AwardTypeEmpty = 0;
  // 生命值
  Hp = 1;
  // 攻击力
  Atk = 2;
  // 原初之力
  Power = 3;
}

// 玩家掉落后,复活后回退数格后的位置信息
message BrPlayerRollback {
  // 玩家 uid | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 1;
  // 角色所在坐标 | @inject_tag: msgpack:"newPos" json:"newPos"
  RolePosition newPos = 2;
}

message BrRolePositions {
  //房间内玩家信息 | @inject_tag: msgpack:"roomDetail" json:"roomDetail"
  RoomDetail roomDetail = 2;
}